{"version":3,"sources":["serviceWorker.js","store/todo.redux.js","store/storeProvider.js","api/urls.js","api/apiInstance.js","api/filterResponse.js","api/city/city-api.js","components/CityPicker.js","views/Form1.js","helpers/Tree.js","helpers/BinaryHeap.js","views/Home.js","views/HeapSort.js","Menu.js","Router.js","theme.js","AppTheme.js","index.js"],"names":["Boolean","window","location","hostname","match","todos","state","action","type","id","text","completed","map","todo","rootReducer","combineReducers","store","createStore","BASEURL","PROVINCES","apiInstance","axios","create","timeout","withCredentials","catchError","error","Promise","resolve","response","data","status","filterResponse","includes","getProvinces","api","get","urls","then","catch","getCities","provinceId","getDistricts","cityId","CityPicker","emptyOptions","provinceOptions","cityOptions","districtOptions","isLoading","selectedProvince","selectedCity","selectedDistrict","handleChange","prop","value","resetedDate","getResetedData","props","onChange","newState","setState","getSubItems","selectedProp","getCityOptions","getDistrictOptions","cityApi","r","console","warn","mapToInputOptions","getProvinceOptions","x","label","slug","this","provinceColSize","cityColSize","districtColSize","Fragment","className","options","isDisabled","Component","defaultProps","Node","val","name","children","Array","fill","Tree","root","lastNode","index","prototype","getArrayTree","arr","i","length","getArrayHierarchy","jsonData","getHierarchy","hierarchy","getRoot","insertLevelOrder","left","right","splice","tree","BinaryHeap","content","initContent","history","sortedArray","push","element","log","swap","j","heapSort","Math","floor","k","maxHeap","removedRoot","logNode","output","largest","hasLeftChild","hasRightChild","getTree","initRoot","blue","green","white","bg","swapColor","compareColor","node","isSwapNode","isCompareNode","isRoot","depth","isParent","statusColor","Group","top","y","stroke","strokeWidth","strokeDasharray","strokeOpacity","rx","onClick","alert","JSON","stringify","dy","fontSize","fontFamily","textAnchor","style","pointerEvents","RootNode","fontWeight","ParentNode","margin","React","useState","setData","activeIndex","setActiveIndex","xMax","yMax","useEffect","document","addEventListener","e","keyCode","handleKeyPress","heap","sampleArray","max","array","random","sort","shuffle","forEach","nodes","test","Grid","container","alignItems","justify","item","xs","Typography","variant","display","Paper","Box","padding","filter","idx","width","height","LinearGradient","from","to","size","links","link","LinkVertical","key","descendants","textAlign","p","useStyles","makeStyles","theme","maxWidth","backgroundColor","palette","background","paper","nested","paddingLeft","spacing","App","classes","open","setOpen","handleClick","getSubMenu","list","Collapse","in","unmountOnExit","List","ListItem","title","button","component","Link","path","ListItemText","primary","Drawer","drawer","onClose","aria-labelledby","subheader","ListSubheader","flexGrow","menuButton","marginRight","setDrawerState","toggleDrawer","event","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Button","commponent","target","href","Container","pt","HeapSort","createMuiTheme","jss","plugins","jssPreset","AppTheme","StylesProvider","CssBaseline","ReactDOM","render","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d4f3c70.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let nextTodoId = 0;\r\nexport const addTodo = text => ({\r\n  type: \"ADD_TODO\",\r\n  id: nextTodoId++,\r\n  text\r\n});\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n  type: \"SET_VISIBILITY_FILTER\",\r\n  filter\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: \"TOGGLE_TODO\",\r\n  id\r\n});\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: \"SHOW_ALL\",\r\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\r\n  SHOW_ACTIVE: \"SHOW_ACTIVE\"\r\n};\r\n\r\n// reducer ----------------------------------------------------------------\r\nconst todos = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n      ];\r\n    case \"TOGGLE_TODO\":\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todos;\r\n\r\n// ------------------------------------------------\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport todos from \"./todo.redux\";\r\nconst rootReducer = combineReducers({ todos });\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","export const BASEURL = \"https://api.tavanito.com\";\r\n\r\nexport const APIVERSION = \"/v1\";\r\n\r\nexport const BASEAPIURL = BASEURL + APIVERSION;\r\n\r\n//provinces\r\nexport const PROVINCES = BASEURL + APIVERSION + \"/provinces\";","import axios from 'axios';\r\n\r\nconst apiInstance = axios.create({\r\n    timeout: 10000,\r\n    // `withCredentials` indicates whether or not cross-site Access-Control requests\r\n    // should be made using credentials\r\n    //'Access-Control-Allow-Origin' header\r\n    withCredentials: false\r\n});\r\n\r\nexport default apiInstance;\r\n","export const catchError = error =>\r\n  new Promise(resolve => {\r\n    if (error.response) {\r\n      resolve({ error: true, data: error.response.data, status: error.response.status });\r\n    } else {\r\n      resolve({ error: true, data: error, status: error.status });\r\n    }\r\n  });\r\n\r\nexport const filterResponse = response =>\r\n  new Promise(resolve => {\r\n    if ([200, 201].includes(response.status)) {\r\n      return resolve({ error: false, data: response.data, status: response.status });\r\n    }\r\n    return resolve({ error: true, data: response.data, status: response.status });\r\n  });\r\n\r\nexport default filterResponse;\r\n","import * as urls from \"../urls\";\r\nimport api from \"../apiInstance\";\r\nimport { filterResponse, catchError } from \"../filterResponse\";\r\n\r\nexport const getProvinces = () => api.get(urls.PROVINCES).then(filterResponse).catch(catchError);\r\n\r\nexport const getCities = (provinceId) => api.get(urls.PROVINCES + `/${provinceId}/cities`).then(filterResponse).catch(catchError);\r\n\r\nexport const getDistricts = (provinceId, cityId) => api.get(urls.PROVINCES + `/${provinceId}/cities/${cityId}/districts`).then(filterResponse).catch(catchError);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Select from 'react-select';\r\nimport * as cityApi from '../api/city/city-api';\r\n\r\nclass CityPicker extends Component {\r\n\r\n  static defaultProps = {\r\n    provinceColSize: 4,\r\n    cityColSize: 4,\r\n    districtColSize: 4\r\n  };\r\n\r\n  emptyOptions = {\r\n    provinceOptions: [],\r\n    cityOptions: [],\r\n    districtOptions: [],\r\n  }\r\n\r\n  state = {\r\n    isLoading: true,\r\n    selectedProvince: \"\",\r\n    selectedCity: \"\",\r\n    selectedDistrict: \"\",\r\n    ...this.emptyOptions\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getProvinceOptions();\r\n  }\r\n\r\n  handleChange = (prop) => (value) => {\r\n\r\n    const resetedDate = this.getResetedData(prop);\r\n\r\n    if (this.props.onChange) {\r\n\r\n      const { selectedProvince, selectedCity, selectedDistrict } = this.state;\r\n\r\n      const newState = {\r\n        selectedProvince, selectedCity, selectedDistrict, ...resetedDate,\r\n        [prop]: value\r\n      };\r\n\r\n      this.props.onChange(newState);\r\n    }\r\n\r\n    this.setState({ [prop]: value, ...resetedDate }, this.getSubItems(prop));\r\n  }\r\n\r\n  getResetedData = (selectedProp) => {\r\n    switch (selectedProp) {\r\n      case 'selectedProvince':\r\n        return { selectedCity: '', selectedDistrict: '' };\r\n      case 'selectedCity':\r\n        return { selectedDistrict: '' };\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  getSubItems = (selectedProp) => () => {\r\n    switch (selectedProp) {\r\n      case 'selectedProvince':\r\n        this.getCityOptions();\r\n        break;\r\n      case 'selectedCity':\r\n        this.getDistrictOptions();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  getCityOptions = () => {\r\n\r\n    const selectedProvince = this.state.selectedProvince;\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    cityApi.getCities(selectedProvince.value).then(r => {\r\n\r\n      if (r.error) {\r\n        console.warn(r.data);\r\n        this.setState({ isLoading: false });\r\n        return;\r\n      }\r\n\r\n      this.setState({ isLoading: false, cityOptions: this.mapToInputOptions(r.data.data) });\r\n    });\r\n  }\r\n\r\n  getDistrictOptions = () => {\r\n\r\n    const { selectedProvince, selectedCity } = this.state;\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    cityApi.getDistricts(selectedProvince.value, selectedCity.value).then(r => {\r\n\r\n      if (r.error) {\r\n        console.warn(r.data);\r\n        this.setState({ isLoading: false });\r\n        return;\r\n      }\r\n\r\n      this.setState({ isLoading: false, districtOptions: this.mapToInputOptions(r.data.data) });\r\n    });\r\n\r\n  }\r\n\r\n  getProvinceOptions = () => {\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    cityApi.getProvinces().then(r => {\r\n\r\n      this.setState({ isLoading: false, provinceOptions: this.mapToInputOptions(r.data.data) });\r\n    });\r\n\r\n  }\r\n\r\n  mapToInputOptions = (data) => data.map((x) => ({ label: x.slug, value: x.id }));\r\n\r\n  render() {\r\n\r\n    const { selectedProvince, selectedCity, selectedDistrict, isLoading,\r\n      provinceOptions, cityOptions, districtOptions } = this.state;\r\n\r\n    const { provinceColSize, cityColSize, districtColSize } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className={`col-${provinceColSize}`}>\r\n          <label>Province</label>\r\n          <Select\r\n            value={selectedProvince}\r\n            onChange={this.handleChange('selectedProvince')}\r\n            options={provinceOptions}\r\n            isDisabled={isLoading}\r\n          />\r\n        </div>\r\n        <div className={`col-${cityColSize}`}>\r\n          <label>City</label>\r\n          <Select\r\n            value={selectedCity}\r\n            onChange={this.handleChange('selectedCity')}\r\n            options={cityOptions}\r\n            isDisabled={isLoading || !selectedProvince}\r\n          />\r\n\r\n        </div>\r\n        <div className={`col-${districtColSize}`}>\r\n          <label>District</label>\r\n          <Select\r\n            value={selectedDistrict}\r\n            onChange={this.handleChange('selectedDistrict')}\r\n            options={districtOptions}\r\n            isDisabled={isLoading || !selectedCity}\r\n          />\r\n        </div>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst sizeOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\nCityPicker.propTypes = {\r\n  cityColSize: PropTypes.oneOf(sizeOptions),\r\n  provinceColSize: PropTypes.oneOf(sizeOptions),\r\n  districtColSize: PropTypes.oneOf(sizeOptions),\r\n};\r\n\r\nexport default CityPicker;\r\n","import React, { Component } from 'react';\nimport CityPicker from '../components/CityPicker';\n\nclass HomePage extends Component {\n\n  handleChange = (data) => {\n    console.log(data);\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className=\"row\">\n          <CityPicker provinceColSize={5} cityColSize={3} onChange={this.handleChange} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;","import { hierarchy } from \"d3-hierarchy\";\r\n\r\nfunction Node(val) {\r\n  this.name = val;\r\n  this.children = Array(2).fill(null);\r\n}\r\n\r\nfunction Tree() {\r\n  this.root = null;\r\n  this.lastNode = null;\r\n  this.index = 0;\r\n}\r\n\r\nTree.prototype.getArrayTree = function(arr, i) {\r\n  if (!i && i !== 0) i = 0;\r\n\r\n  let root = { name: arr[i] + \"\" };\r\n  if (i + 1 >= arr.length) return root;\r\n  if (!root) root = { name: arr[i] + \"\" };\r\n  root.children = [this.getArrayTree(arr, i + 1)];\r\n  return root;\r\n};\r\n\r\nTree.prototype.getArrayHierarchy = function(arr) {\r\n  var jsonData = this.getArrayTree(arr);\r\n  return this.getHierarchy(jsonData);\r\n};\r\n\r\nTree.prototype.getHierarchy = function(root) {\r\n  return hierarchy(root);\r\n};\r\n\r\nTree.prototype.getRoot = function(arr, root, i) {\r\n  return this.getHierarchy(this.insertLevelOrder(arr, root, i));\r\n};\r\n\r\nTree.prototype.insertLevelOrder = function(arr, root, i) {\r\n  // Base case for recursion\r\n\r\n  if (i < arr.length) {\r\n    var temp = new Node(arr[i]);\r\n    root = temp;\r\n    // insert left child\r\n    root.children[0] = this.insertLevelOrder(arr, root.left, 2 * i + 1);\r\n    // insert right child\r\n    root.children[1] = this.insertLevelOrder(arr, root.right, 2 * i + 2);\r\n  }\r\n\r\n  if (root && root.children) {\r\n    if (!root.children[0] && !root.children[1]) delete root.children;\r\n    else if (!root.children[0]) root.children.splice(0, 1);\r\n    else if (!root.children[1]) root.children.splice(1, 1);\r\n  }\r\n\r\n  return root;\r\n};\r\n\r\nexport default Tree;\r\n","import Tree from \"./Tree\";\r\n\r\nlet tree = new Tree();\r\n\r\nfunction BinaryHeap() {\r\n  this.content = [];\r\n  this.initContent = [];\r\n  this.history = [];\r\n  this.sortedArray = [];\r\n}\r\n\r\nBinaryHeap.prototype = {\r\n  push: function(element) {\r\n    // Add the new element to the end of the array.\r\n    this.content.push(element);\r\n    this.initContent.push(element);\r\n    this.log(\"insert \" + this.content.length);\r\n    // Allow it to bubble up.\r\n    // this.heapSort(this.content.length);\r\n  },\r\n  arr: function(index) {\r\n    return this.content[index];\r\n  },\r\n  swap: function(i, j) {\r\n    this.log(`swap`, [i, j]);\r\n    [this.content[i], this.content[j]] = [this.content[j], this.content[i]];\r\n  },\r\n  heapSort: function() {\r\n    let length = this.content.length;\r\n    let i = Math.floor(length / 2 - 1);\r\n    let k = length - 1;\r\n\r\n    while (i >= 0) {\r\n      this.log(\"First MaxHeap \" + i);\r\n      this.maxHeap(i, length);\r\n      i--;\r\n    }\r\n\r\n    while (k >= 0) {\r\n      let length = this.content.length;\r\n      this.swap(0, k);\r\n      this.log(\"remove \" + k);\r\n      let removedRoot = this.content.splice(k, 1);\r\n      this.sortedArray.push(removedRoot);\r\n      this.log(\"Second MaxHeap 0\");\r\n      this.maxHeap(0, length);\r\n      k--;\r\n    }\r\n  },\r\n  log: function(label, logNode) {\r\n    this.history.push({\r\n      label,\r\n      root: tree.getRoot(this.content, {}, 0),\r\n      logNode,\r\n      output:\r\n        this.sortedArray.length > 0 && tree.getArrayHierarchy(this.sortedArray)\r\n    });\r\n  },\r\n  maxHeap: function(i, length) {\r\n    this.log(`MaxHeap (${i})`);\r\n\r\n    let largest = i;\r\n\r\n    let left = i * 2 + 1;\r\n    let right = left + 1;\r\n\r\n    let hasLeftChild = left < length;\r\n    let hasRightChild = right < length;\r\n\r\n    if (hasLeftChild) this.log(`compare`, [left, largest]);\r\n\r\n    if (hasLeftChild && this.arr(left) > this.arr(largest)) {\r\n      largest = left;\r\n    }\r\n\r\n    if (hasRightChild) this.log(`compare`, [right, largest]);\r\n\r\n    if (hasRightChild && this.arr(right) > this.arr(largest)) {\r\n      largest = right;\r\n    }\r\n\r\n    if (largest !== i) {\r\n      this.swap(i, largest);\r\n      this.maxHeap(largest, length);\r\n    }\r\n  },\r\n  getTree: function() {\r\n    this.heapSort();\r\n    let root = tree.getRoot(this.content, {}, 0);\r\n    let initRoot = tree.getRoot(this.initContent, {}, 0);\r\n    return { root, initRoot, history: this.history };\r\n  }\r\n};\r\n\r\nexport default BinaryHeap;\r\n","import React, { useEffect } from \"react\";\r\nimport { Group } from \"@vx/group\";\r\nimport { Tree } from \"@vx/hierarchy\";\r\nimport { LinkVertical } from \"@vx/shape\";\r\nimport { LinearGradient } from \"@vx/gradient\";\r\n\r\nimport BinaryHeap from \"../helpers/BinaryHeap\";\r\nimport { Grid, Box, Typography, Fab, Button, Paper } from \"@material-ui/core\";\r\n\r\nimport ArrowLeft from \"@material-ui/icons/ArrowLeft\";\r\nimport ArrowRight from \"@material-ui/icons/ArrowRightAltOutlined\";\r\n\r\nconst peach = \"#fd9b93\";\r\nconst pink = \"#fe6e9e\";\r\nconst blue = \"#03c0dc\";\r\nconst green = \"#26deb0\";\r\nconst rootColor = \"#fe8a71\";\r\nconst lightpurple = \"#3da4ab\";\r\nconst white = \"#ffffff\";\r\nconst bg = \"#4a4e4d\";\r\n\r\nconst swapColor = \"#fe8a71\";\r\nconst compareColor = \"#f6cd61\";\r\n\r\nfunction Node({ node, isSwapNode, isCompareNode }) {\r\n  const isRoot = node.depth === 0;\r\n  const isParent = !!node.children;\r\n\r\n  let statusColor = null;\r\n  if (isSwapNode === true) {\r\n    statusColor = swapColor;\r\n  } else if (isCompareNode === true) {\r\n    statusColor = compareColor;\r\n  }\r\n\r\n  if (isRoot) return <RootNode statusColor={statusColor} node={node} />;\r\n  if (isParent) return <ParentNode statusColor={statusColor} node={node} />;\r\n  //leafs\r\n  return (\r\n    <Group top={node.y} left={node.x}>\r\n      <circle\r\n        r={30}\r\n        fill={bg}\r\n        stroke={statusColor || green}\r\n        strokeWidth={1}\r\n        strokeDasharray={\"2,2\"}\r\n        strokeOpacity={0.6}\r\n        rx={10}\r\n        onClick={() => {\r\n          alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n        }}\r\n      />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        fill={green}\r\n        style={{ pointerEvents: \"none\" }}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nfunction RootNode({ node, statusColor }) {\r\n  return (\r\n    <Group\r\n      top={node.y}\r\n      left={node.x}\r\n      onClick={() => {\r\n        alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n      }}\r\n    >\r\n      <circle r={30} fill={bg} stroke={statusColor || white} />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontWeight={500}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        style={{ pointerEvents: \"none\" }}\r\n        fill={white}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nfunction ParentNode({ node, statusColor }) {\r\n  return (\r\n    <Group top={node.y} left={node.x}>\r\n      <circle\r\n        r={30}\r\n        fill={bg}\r\n        stroke={statusColor || blue}\r\n        strokeWidth={1}\r\n        onClick={() => {\r\n          alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n        }}\r\n      />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        style={{ pointerEvents: \"none\" }}\r\n        fill={white}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nexport default () => {\r\n  let width = 600;\r\n  let height = 500;\r\n  let margin = {\r\n    top: 40,\r\n    left: 16,\r\n    right: 16,\r\n    bottom: 40\r\n  };\r\n\r\n  const [data, setData] = React.useState();\r\n  const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n  const xMax = height - margin.top - margin.bottom;\r\n  const yMax = width - margin.left - margin.right;\r\n\r\n  function test() {\r\n    var heap = new BinaryHeap();\r\n    function getRandomInt(max) {\r\n      return Math.floor(Math.random() * Math.floor(max));\r\n    }\r\n\r\n    function shuffle() {\r\n      let array = [];\r\n      for (let i = 0; i < 10; i++) array.push(getRandomInt(100));\r\n\r\n      return array.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    var sampleArray = shuffle(); //[83, 26, 51, 54, 41, 88, 37, 0, 49, 57]; //shuffle();\r\n\r\n    sampleArray.forEach(x => {\r\n      heap.push(x);\r\n    });\r\n\r\n    var tree = heap.getTree();\r\n\r\n    setData({\r\n      nodes: sampleArray,\r\n      root: tree.root,\r\n      initRoot: tree.initRoot,\r\n      history: [{ label: \"init\", root: tree.initRoot }, ...tree.history]\r\n    });\r\n  }\r\n\r\n  const handleKeyPress = data => e => {\r\n    if (!data) return;\r\n\r\n    if (e.keyCode === 39) {\r\n      setActiveIndex(x => (x + 1 >= data.history.length ? x : x + 1));\r\n    } else if (e.keyCode === 37) {\r\n      setActiveIndex(x => (x - 1 < 0 ? x : x - 1));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress(data));\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    test(\"mounted\");\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"space-around\">\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {activeIndex}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={1}>\r\n            You can use your keyboard's (← or →) right and left arrow key to go\r\n            forward or backward.\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        {data &&\r\n          data.history\r\n            .filter((x, idx) => idx === activeIndex)\r\n            .map(x => (\r\n              <svg width={width} height={height}>\r\n                <LinearGradient id=\"lg\" from={peach} to={pink} />\r\n                <rect width={width} height={height} rx={14} fill={bg} />\r\n\r\n                <Group top={30} left={30}>\r\n                  <text\r\n                    dy={\".33em\"}\r\n                    fontSize={18}\r\n                    fontFamily=\"Open Sans\"\r\n                    textAnchor={\"left\"}\r\n                    style={{ pointerEvents: \"none\" }}\r\n                    fill={white}\r\n                  >\r\n                    {x.label}\r\n                  </text>\r\n                </Group>\r\n                <Tree root={x.root} size={[yMax, xMax]}>\r\n                  {tree => {\r\n                    return (\r\n                      <Group top={margin.top} left={margin.left}>\r\n                        {tree.links().map((link, i) => {\r\n                          return (\r\n                            <LinkVertical\r\n                              key={`link-${i}`}\r\n                              data={link}\r\n                              stroke={lightpurple}\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                            />\r\n                          );\r\n                        })}\r\n                        {tree.descendants().map((node, i) => {\r\n                          return (\r\n                            <Node\r\n                              key={`node-${i}`}\r\n                              node={node}\r\n                              isSwapNode={\r\n                                x.label === \"swap\" && x.logNode.includes(i)\r\n                              }\r\n                              isCompareNode={\r\n                                x.label === \"compare\" && x.logNode.includes(i)\r\n                              }\r\n                            />\r\n                          );\r\n                        })}\r\n                      </Group>\r\n                    );\r\n                  }}\r\n                </Tree>\r\n              </svg>\r\n            ))}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <svg width={width} height={height}>\r\n          <LinearGradient id=\"lg\" from={peach} to={pink} />\r\n          <rect width={width} height={height} rx={14} fill={bg} />\r\n          <Group top={30} left={30}>\r\n            <text\r\n              dy={\".33em\"}\r\n              fontSize={18}\r\n              fontFamily=\"Open Sans\"\r\n              textAnchor={\"left\"}\r\n              style={{ pointerEvents: \"none\" }}\r\n              fill={white}\r\n            >\r\n              Output\r\n            </text>\r\n          </Group>\r\n          {data &&\r\n            data.history\r\n              .filter((log, idx) => idx === activeIndex && log.output)\r\n              .map(log => (\r\n                <Tree root={log.output} size={[yMax, xMax]}>\r\n                  {tree => {\r\n                    return (\r\n                      <Group top={margin.top} left={margin.left}>\r\n                        {tree.links().map((link, i) => {\r\n                          return (\r\n                            <LinkVertical\r\n                              key={`link-${i}`}\r\n                              data={link}\r\n                              stroke={lightpurple}\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                            />\r\n                          );\r\n                        })}\r\n                        {tree.descendants().map((node, i) => {\r\n                          return <Node key={`node-${i}`} node={node} />;\r\n                        })}\r\n                      </Group>\r\n                    );\r\n                  }}\r\n                </Tree>\r\n              ))}\r\n        </svg>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Box textAlign=\"center\">\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            [\r\n          </Typography>\r\n          {data &&\r\n            data.nodes.map(x => (\r\n              <Box display=\"inline\" p={1}>\r\n                <Typography variant=\"h5\" display=\"inline\">\r\n                  {x}\r\n                </Typography>\r\n              </Box>\r\n            ))}\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            ]\r\n          </Typography>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { Group } from \"@vx/group\";\r\nimport { Tree } from \"@vx/hierarchy\";\r\nimport { LinkVertical } from \"@vx/shape\";\r\nimport { LinearGradient } from \"@vx/gradient\";\r\n\r\nimport BinaryHeap from \"../helpers/BinaryHeap\";\r\nimport { Grid, Box, Typography, Paper } from \"@material-ui/core\";\r\n\r\nconst peach = \"#fd9b93\";\r\nconst pink = \"#fe6e9e\";\r\nconst blue = \"#03c0dc\";\r\nconst green = \"#26deb0\";\r\nconst lightpurple = \"#3da4ab\";\r\nconst white = \"#ffffff\";\r\nconst bg = \"#4a4e4d\";\r\n\r\nconst swapColor = \"#fe8a71\";\r\nconst compareColor = \"#f6cd61\";\r\n\r\nfunction Node({ node, isSwapNode, isCompareNode }) {\r\n  const isRoot = node.depth === 0;\r\n  const isParent = !!node.children;\r\n\r\n  let statusColor = null;\r\n  if (isSwapNode === true) {\r\n    statusColor = swapColor;\r\n  } else if (isCompareNode === true) {\r\n    statusColor = compareColor;\r\n  }\r\n\r\n  if (isRoot) return <RootNode statusColor={statusColor} node={node} />;\r\n  if (isParent) return <ParentNode statusColor={statusColor} node={node} />;\r\n  //leafs\r\n  return (\r\n    <Group top={node.y} left={node.x}>\r\n      <circle\r\n        r={30}\r\n        fill={bg}\r\n        stroke={statusColor || green}\r\n        strokeWidth={1}\r\n        strokeDasharray={\"2,2\"}\r\n        strokeOpacity={0.6}\r\n        rx={10}\r\n        onClick={() => {\r\n          alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n        }}\r\n      />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        fill={green}\r\n        style={{ pointerEvents: \"none\" }}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nfunction RootNode({ node, statusColor }) {\r\n  return (\r\n    <Group\r\n      top={node.y}\r\n      left={node.x}\r\n      onClick={() => {\r\n        alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n      }}\r\n    >\r\n      <circle r={30} fill={bg} stroke={statusColor || white} />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontWeight={500}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        style={{ pointerEvents: \"none\" }}\r\n        fill={white}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nfunction ParentNode({ node, statusColor }) {\r\n  return (\r\n    <Group top={node.y} left={node.x}>\r\n      <circle\r\n        r={30}\r\n        fill={bg}\r\n        stroke={statusColor || blue}\r\n        strokeWidth={1}\r\n        onClick={() => {\r\n          alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n        }}\r\n      />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        style={{ pointerEvents: \"none\" }}\r\n        fill={white}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nexport default () => {\r\n  let width = 600;\r\n  let height = 500;\r\n  let margin = {\r\n    top: 40,\r\n    left: 16,\r\n    right: 16,\r\n    bottom: 40\r\n  };\r\n\r\n  const [data, setData] = React.useState();\r\n  const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n  const xMax = height - margin.top - margin.bottom;\r\n  const yMax = width - margin.left - margin.right;\r\n\r\n  function test() {\r\n    var heap = new BinaryHeap();\r\n    function getRandomInt(max) {\r\n      return Math.floor(Math.random() * Math.floor(max));\r\n    }\r\n\r\n    function shuffle() {\r\n      let array = [];\r\n      for (let i = 0; i < 10; i++) array.push(getRandomInt(100));\r\n\r\n      return array.sort(() => Math.random() - 0.5);\r\n    }\r\n\r\n    var sampleArray = shuffle(); //[83, 26, 51, 54, 41, 88, 37, 0, 49, 57]; //shuffle();\r\n\r\n    sampleArray.forEach(x => {\r\n      heap.push(x);\r\n    });\r\n\r\n    var tree = heap.getTree();\r\n\r\n    setData({\r\n      nodes: sampleArray,\r\n      root: tree.root,\r\n      initRoot: tree.initRoot,\r\n      history: [{ label: \"init\", root: tree.initRoot }, ...tree.history]\r\n    });\r\n  }\r\n\r\n  const handleKeyPress = data => e => {\r\n    if (!data) return;\r\n\r\n    if (e.keyCode === 39) {\r\n      setActiveIndex(x => (x + 1 >= data.history.length ? x : x + 1));\r\n    } else if (e.keyCode === 37) {\r\n      setActiveIndex(x => (x - 1 < 0 ? x : x - 1));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress(data));\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    test(\"mounted\");\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"space-around\">\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {activeIndex}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={1}>\r\n            You can use your keyboard's (← or →) right and left arrow key to go\r\n            forward or backward.\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        {data &&\r\n          data.history\r\n            .filter((x, idx) => idx === activeIndex)\r\n            .map(x => (\r\n              <svg width={width} height={height}>\r\n                <LinearGradient id=\"lg\" from={peach} to={pink} />\r\n                <rect width={width} height={height} rx={14} fill={bg} />\r\n\r\n                <Group top={30} left={30}>\r\n                  <text\r\n                    dy={\".33em\"}\r\n                    fontSize={18}\r\n                    fontFamily=\"Open Sans\"\r\n                    textAnchor={\"left\"}\r\n                    style={{ pointerEvents: \"none\" }}\r\n                    fill={white}\r\n                  >\r\n                    {x.label}\r\n                  </text>\r\n                </Group>\r\n                <Tree root={x.root} size={[yMax, xMax]}>\r\n                  {tree => {\r\n                    return (\r\n                      <Group top={margin.top} left={margin.left}>\r\n                        {tree.links().map((link, i) => {\r\n                          return (\r\n                            <LinkVertical\r\n                              key={`link-${i}`}\r\n                              data={link}\r\n                              stroke={lightpurple}\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                            />\r\n                          );\r\n                        })}\r\n                        {tree.descendants().map((node, i) => {\r\n                          return (\r\n                            <Node\r\n                              key={`node-${i}`}\r\n                              node={node}\r\n                              isSwapNode={\r\n                                x.label === \"swap\" && x.logNode.includes(i)\r\n                              }\r\n                              isCompareNode={\r\n                                x.label === \"compare\" && x.logNode.includes(i)\r\n                              }\r\n                            />\r\n                          );\r\n                        })}\r\n                      </Group>\r\n                    );\r\n                  }}\r\n                </Tree>\r\n              </svg>\r\n            ))}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <svg width={width} height={height}>\r\n          <LinearGradient id=\"lg\" from={peach} to={pink} />\r\n          <rect width={width} height={height} rx={14} fill={bg} />\r\n          <Group top={30} left={30}>\r\n            <text\r\n              dy={\".33em\"}\r\n              fontSize={18}\r\n              fontFamily=\"Open Sans\"\r\n              textAnchor={\"left\"}\r\n              style={{ pointerEvents: \"none\" }}\r\n              fill={white}\r\n            >\r\n              Output\r\n            </text>\r\n          </Group>\r\n          {data &&\r\n            data.history\r\n              .filter((log, idx) => idx === activeIndex && log.output)\r\n              .map(log => (\r\n                <Tree root={log.output} size={[yMax, xMax]}>\r\n                  {tree => {\r\n                    return (\r\n                      <Group top={margin.top} left={margin.left}>\r\n                        {tree.links().map((link, i) => {\r\n                          return (\r\n                            <LinkVertical\r\n                              key={`link-${i}`}\r\n                              data={link}\r\n                              stroke={lightpurple}\r\n                              strokeWidth=\"1\"\r\n                              fill=\"none\"\r\n                            />\r\n                          );\r\n                        })}\r\n                        {tree.descendants().map((node, i) => {\r\n                          return <Node key={`node-${i}`} node={node} />;\r\n                        })}\r\n                      </Group>\r\n                    );\r\n                  }}\r\n                </Tree>\r\n              ))}\r\n        </svg>\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Box textAlign=\"center\">\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            [\r\n          </Typography>\r\n          {data &&\r\n            data.nodes.map(x => (\r\n              <Box display=\"inline\" p={1}>\r\n                <Typography variant=\"h5\" display=\"inline\">\r\n                  {x}\r\n                </Typography>\r\n              </Box>\r\n            ))}\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            ]\r\n          </Typography>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n  List,\r\n  ListSubheader,\r\n  ListItem,\r\n  ListItemText,\r\n  Collapse,\r\n  Drawer\r\n} from \"@material-ui/core\";\r\n\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4)\r\n  }\r\n}));\r\n\r\nexport default function App(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(\"\");\r\n\r\n  const handleClick = id => () => {\r\n    if (open === id) id = \"\";\r\n    setOpen(id);\r\n  };\r\n\r\n  const getSubMenu = (id, list) => (\r\n    <Collapse in={open === id} timeout=\"auto\" unmountOnExit>\r\n      <List>\r\n        {list.map(x => (\r\n          <ListItem\r\n            key={x.title}\r\n            button\r\n            component={Link}\r\n            to={\"/sandbox/\" + x.path}\r\n            className={classes.nested}\r\n          >\r\n            <ListItemText primary={x.title} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Collapse>\r\n  );\r\n\r\n  return (\r\n    <Drawer open={props.drawer} onClose={props.onClose}>\r\n      <List\r\n        component=\"nav\"\r\n        aria-labelledby=\"nested-list-subheader\"\r\n        subheader={\r\n          <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n            Topics\r\n          </ListSubheader>\r\n        }\r\n        className={classes.root}\r\n      >\r\n        <ListItem button onClick={handleClick(\"AdvancedAlgorithms\")}>\r\n          <ListItemText primary=\"Advanced Algorithms\" />\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </ListItem>\r\n        {getSubMenu(\"AdvancedAlgorithms\", [\r\n          { path: \"/Heap-Sort\", title: \"Heap Sort\" },\r\n          { path: \"/Binomial-Heaps\", title: \"Binomial Heaps\" }\r\n        ])}\r\n\r\n        <ListItem button onClick={handleClick(\"AdvancedOperatingSystem\")}>\r\n          <ListItemText primary=\"Advanced Operating System\" />\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </ListItem>\r\n        {getSubMenu(\"AdvancedOperatingSystem\", [\r\n          { path: \"/os1\", title: \"os1\" }\r\n        ])}\r\n\r\n        <ListItem button onClick={handleClick(\"AdvancedCompiler\")}>\r\n          <ListItemText primary=\"Advanced Compiler\" />\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </ListItem>\r\n        {getSubMenu(\"AdvancedCompiler\", [\r\n          { path: \"/compiler1\", title: \"compiler1\" }\r\n        ])}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport Form1 from \"./views/Form1\";\r\nimport Home from \"./views/Home\";\r\nimport HeapSort from \"./views/HeapSort\";\r\nimport {\r\n  Container,\r\n  Typography,\r\n  AppBar,\r\n  Toolbar,\r\n  Button,\r\n  Link,\r\n  Box\r\n} from \"@material-ui/core\";\r\nimport Menu from \"./Menu\";\r\n\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nexport default function App() {\r\n  const classes = useStyles();\r\n\r\n  const [drawer, setDrawerState] = React.useState(false);\r\n\r\n  const toggleDrawer = open => event => {\r\n    if (\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setDrawerState(open);\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <Menu drawer={drawer} onClose={toggleDrawer(false)} />\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            onClick={toggleDrawer(true)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Berneti Projects\r\n          </Typography>\r\n          <Button\r\n            commponent={Link}\r\n            target=\"_blank\"\r\n            href=\"https://github.com/mberneti/sandbox\"\r\n            color=\"inherit\"\r\n          >\r\n            Open On Github\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container>\r\n        <Box pt={5}>\r\n          <Switch>\r\n            <Route path=\"/sandbox/Heap-Sort\">\r\n              <HeapSort />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <HeapSort />\r\n            </Route>\r\n          </Switch>\r\n        </Box>\r\n      </Container>\r\n    </Router>\r\n  );\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nexport default theme;\n","import React from \"react\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport Router from \"./Router\";\nimport theme from \"./theme\";\nimport { StylesProvider, jssPreset } from \"@material-ui/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nimport { create } from \"jss\";\n\n// Configure JSS\nconst jss = create({ plugins: [...jssPreset().plugins] });\n\nconst AppTheme = props => (\n  <MuiThemeProvider theme={theme}>\n    <StylesProvider jss={jss}>\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <Router />\n    </StylesProvider>\n  </MuiThemeProvider>\n);\n\nexport default AppTheme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store/storeProvider\";\n\nimport AppTheme from \"AppTheme\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppTheme />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}