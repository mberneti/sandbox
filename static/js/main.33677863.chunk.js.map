{"version":3,"sources":["store/todo.redux.js","store/storeProvider.js","serviceWorker.js","Layout/Menu.js","Layout/CustomAppBar.js","helpers/Tree.js","helpers/HeapSortHelper.js","components/TreeViewer.js","helpers/MathHelper.js","views/HeapSort.js","views/Home.js","helpers/MaxHeapInsertHelper.js","views/MaxHeapInsert.js","helpers/MaxHeapifyHelper.js","views/MaxHeapify.js","components/ProcessTable.js","components/ProcessList.js","helpers/FCFSScheduler.js","views/FCFS.js","helpers/RoundRobinScheduler.js","views/RoundRobin.js","components/MatrixTable.js","helpers/LUDecompositionHelper.js","views/LUDecomposition.js","helpers/arr-stat.js","views/FFT.js","Router.js","Layout/theme.js","Layout/AppTheme.js","index.js"],"names":["todos","state","action","type","id","text","completed","map","todo","rootReducer","combineReducers","store","createStore","Boolean","window","location","hostname","match","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","nested","paddingLeft","spacing","App","props","classes","React","useState","open","setOpen","handleClick","getSubMenu","list","Collapse","in","timeout","unmountOnExit","List","x","ListItem","key","title","button","component","Link","to","path","className","ListItemText","primary","Drawer","drawer","onClose","aria-labelledby","subheader","ListSubheader","onClick","flexGrow","menuButton","marginRight","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","commponent","target","href","Node","val","this","name","children","Array","fill","Tree","lastNode","index","prototype","getArrayTree","arr","i","length","getArrayHierarchy","getRoot","insertLevelOrder","left","right","splice","tree","BinaryHeap","content","initContent","history","sortedArray","push","element","log","swap","j","heapSort","Math","floor","k","maxHeap","removedRoot","label","logNode","output","largest","hasLeftChild","hasRightChild","getTree","initRoot","blue","green","white","bg","swapColor","compareColor","node","isSwapNode","isCompareNode","isRoot","depth","isParent","statusColor","RootNode","ParentNode","Group","top","y","r","stroke","strokeWidth","strokeDasharray","strokeOpacity","rx","alert","JSON","stringify","data","dy","fontSize","fontFamily","textAnchor","style","pointerEvents","fontWeight","height","margin","mt","ml","mr","bottom","mb","xMax","yMax","treeRoot","hierarchyRoot","hierarchy","logLabel","logNodes","isNodeLogged","includes","LinearGradient","from","size","links","link","LinkVertical","descendants","filter","getRandomInt","max","random","shuffle","count","array","sort","setData","activeIndex","setActiveIndex","useEffect","document","addEventListener","handleKeyPress","heap","HeapSortHelper","sampleArray","mathHelper","forEach","nodes","componentDidMount","e","keyCode","Grid","container","alignItems","justify","item","xs","display","Paper","Box","padding","idx","TreeViewer","textAlign","p","HeapSort","BinaryHeapInsert","maxHeapInsert","getParentValue","parentIndex","getParentIndex","ceil","newNode","childIndex","lastChildIndex","MaxHeapInsertHelper","maxHeapify","MaxHeapifyHelper","items","value","deleteItem","console","setState","onChange","arrivalTime","burstTime","addItem","textChange","randomHSL","randomHSLDark","h","s","l","Table","table","TableHead","TableRow","TableCell","Fab","TableBody","TextField","Component","StyledApp","withStyles","marginTop","overflowX","ItemBorderLinearProgress","LinearProgress","getLabel","isCompletedList","waitingTime","dense","Fragment","Chip","avatar","Avatar","isCompleted","marginBottom","executionDuration","Divider","processState","IsNotArrived","IsReady","IsActive","IsCompleted","FCFSScheduler","tasks","counter","cpuProcessId","contextSwitch","get","find","updateState","objIndex","findIndex","obj","hasNotCompleted","some","setBestCandidate","bestProcess","first","second","checkCpuState","currentCpuProcess","updateReadyQueue","ATBiggerThanCounter","isNotArrived","inCreaseCounter","schdule","params","waitingTimeTotal","turnAroundTimeTotal","totalBurstTime","tasksCount","Throughput","CPUUtilization","avarageWaitingTime","avarageTurnAroundTimeTotal","cpu","temp","getLogs","getInfo","info","BorderLinearProgress","userInput","setUserInput","lastClickKeyCode","setLastClickKeyCode","logs","scheduler","date","Date","getLog","prop","cpuProcess","cpuWaitingTime","cpuCompleted","ProcessTable","ProcessList","pb","border","m","RoundRobinScheduler","roundRobinCounter","isSwitched","arrivalTimeBiggerThanCounter","matrixSize","tempMatrixSize","row","setTempMatrixSize","indexOf","setMatrixSize","innerArray","handleKeyDown","textClassName","classnames","successText","readOnly","pt","justifyContent","helperText","onKeyDown","innerItem","RHSCol","inputStyle","LUDecomposition","matrix","yList","xList","bList","upperTriangle","parse","lowerTriangle","updateUpperTriangular","sourceI","factor","updateLowerTriangular","makeLU","lowerTriangularSum","sum","getYList","upperTriangularSum","getXList","xFactor","getResult","MatrixTable","lu","LUDecompositionHelper","marginLeft","apply","min","range","midrange","num","mean","median","a","b","mid","modes","modeMap","maxCount","variance","pow","standardDeviation","sqrt","meanAbsoluteDeviation","abs","zScores","modifiedZScores","normalize_array","hold_normed_values","this_num","normalize","round_to_precision","precision","undefined","computeDft","input","step","inreal","n","outreal","outimag","inimag","sumreal","sumimag","t","angle","PI","cos","sin","result","hypot","generateValues","wave_type","config","sinPeriodicityFactor","cosPeriodicityFactor","yvalues","xDomain","yDomain","xAxisOn0","yAxisOn0","setSinPeriodicityFactor","setCosPeriodicityFactor","data2","data3","dataDft","data2Dft","data3Dft","maxDft","yDomain2","stat","gutterBottom","Slider","event","newValue","defaultValue","valueLabelDisplay","marks","on0","colorType","sizeType","markStyle","setDrawerState","toggleDrawer","basename","CustomAppBar","pl","routeNames","url","substring","replace","split","Breadcrumbs","Container","FCFS","RoundRobin","MaxHeapInsert","MaxHeapify","FFT","Home","createMuiTheme","secondary","pink","jss","create","plugins","jssPreset","AppTheme","StylesProvider","CssBaseline","ReactDOM","render","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33677863.chunk.js","sourcesContent":["let nextTodoId = 0;\r\nexport const addTodo = text => ({\r\n  type: \"ADD_TODO\",\r\n  id: nextTodoId++,\r\n  text\r\n});\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n  type: \"SET_VISIBILITY_FILTER\",\r\n  filter\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: \"TOGGLE_TODO\",\r\n  id\r\n});\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: \"SHOW_ALL\",\r\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\r\n  SHOW_ACTIVE: \"SHOW_ACTIVE\"\r\n};\r\n\r\n// reducer ----------------------------------------------------------------\r\nconst todos = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n      ];\r\n    case \"TOGGLE_TODO\":\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todos;\r\n\r\n// ------------------------------------------------\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport todos from \"./todo.redux\";\r\nconst rootReducer = combineReducers({ todos });\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n  List,\r\n  ListSubheader,\r\n  ListItem,\r\n  ListItemText,\r\n  Collapse,\r\n  Drawer\r\n} from \"@material-ui/core\";\r\n\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4)\r\n  }\r\n}));\r\n\r\nexport default function App(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(\"\");\r\n\r\n  const handleClick = id => () => {\r\n    if (open === id) id = \"\";\r\n    setOpen(id);\r\n  };\r\n\r\n  const getSubMenu = (id, list) => (\r\n    <Collapse in={open === id} timeout=\"auto\" unmountOnExit>\r\n      <List>\r\n        {list.map(x => (\r\n          <ListItem\r\n            key={x.title}\r\n            button\r\n            component={Link}\r\n            to={\"/\" + id + \"/\" + x.path}\r\n            className={classes.nested}\r\n          >\r\n            <ListItemText primary={x.title} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Collapse>\r\n  );\r\n\r\n  return (\r\n    <Drawer open={props.drawer} onClose={props.onClose}>\r\n      <List\r\n        component=\"nav\"\r\n        aria-labelledby=\"nested-list-subheader\"\r\n        subheader={\r\n          <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n            Topics\r\n          </ListSubheader>\r\n        }\r\n        className={classes.root}\r\n      >\r\n        <ListItem button onClick={handleClick(\"Advanced-Algorithms\")}>\r\n          <ListItemText primary=\"Advanced Algorithms\" />\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </ListItem>\r\n        {getSubMenu(\"Advanced-Algorithms\", [\r\n          { path: \"LU-Decomposition\", title: \"LU Decomposition\" },\r\n          { path: \"FFT\", title: \"FFT\" },\r\n          { path: \"Max-Heap-Insert\", title: \"Max Heap Insert\" },\r\n          { path: \"Max-Heap-Insert\", title: \"Max Heap Insert\" },\r\n          { path: \"Max-Heapify\", title: \"Max Heapify\" },\r\n          { path: \"Heap-Sort\", title: \"Heap Sort\" },\r\n          { path: \"Binomial-Heaps\", title: \"Binomial Heaps\" }\r\n        ])}\r\n\r\n        <ListItem button onClick={handleClick(\"Advanced-OperatingSystem\")}>\r\n          <ListItemText primary=\"Advanced Operating System\" />\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </ListItem>\r\n        {getSubMenu(\"Advanced-OperatingSystem\", [\r\n          { path: \"FCFS\", title: \"FCFS\" },\r\n          { path: \"Round-Robin\", title: \"Round-Robin\" }\r\n        ])}\r\n\r\n        <ListItem button onClick={handleClick(\"Advanced-Compiler\")}>\r\n          <ListItemText primary=\"Advanced Compiler\" />\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </ListItem>\r\n        {getSubMenu(\"Advanced-Compiler\", [\r\n          { path: \"compiler1\", title: \"compiler1\" }\r\n        ])}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nexport default props => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <IconButton\r\n          edge=\"start\"\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          aria-label=\"menu\"\r\n          onClick={props.onClick}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          Berneti Projects\r\n        </Typography>\r\n        <Button\r\n          commponent={Link}\r\n          target=\"_blank\"\r\n          href=\"https://github.com/mberneti/sandbox\"\r\n          color=\"inherit\"\r\n        >\r\n          Open On Github\r\n        </Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","function Node(val) {\r\n  this.name = val;\r\n  this.children = Array(2).fill(null);\r\n}\r\n\r\nfunction Tree() {\r\n  this.root = null;\r\n  this.lastNode = null;\r\n  this.index = 0;\r\n}\r\n\r\nTree.prototype.getArrayTree = function(arr, i) {\r\n  if (!i && i !== 0) i = 0;\r\n\r\n  let root = { name: arr[i] + \"\" };\r\n  if (i + 1 >= arr.length) return root;\r\n  if (!root) root = { name: arr[i] + \"\" };\r\n  root.children = [this.getArrayTree(arr, i + 1)];\r\n  return root;\r\n};\r\n\r\nTree.prototype.getArrayHierarchy = function(arr) {\r\n  return this.getArrayTree(arr);\r\n};\r\n\r\nTree.prototype.getRoot = function(arr, root, i) {\r\n  return this.insertLevelOrder(arr, root, i);\r\n};\r\n\r\nTree.prototype.insertLevelOrder = function(arr, root, i) {\r\n  // Base case for recursion\r\n\r\n  if (i < arr.length) {\r\n    var temp = new Node(arr[i]);\r\n    root = temp;\r\n    // insert left child\r\n    root.children[0] = this.insertLevelOrder(arr, root.left, 2 * i + 1);\r\n    // insert right child\r\n    root.children[1] = this.insertLevelOrder(arr, root.right, 2 * i + 2);\r\n  }\r\n\r\n  if (root && root.children) {\r\n    if (!root.children[0] && !root.children[1]) delete root.children;\r\n    else if (!root.children[0]) root.children.splice(0, 1);\r\n    else if (!root.children[1]) root.children.splice(1, 1);\r\n  }\r\n\r\n  return root;\r\n};\r\n\r\nexport default Tree;\r\n","import Tree from \"./Tree\";\r\n\r\nlet tree = new Tree();\r\n\r\nfunction BinaryHeap() {\r\n  this.content = [];\r\n  this.initContent = [];\r\n  this.history = [];\r\n  this.sortedArray = [];\r\n}\r\n\r\nBinaryHeap.prototype = {\r\n  push: function(element) {\r\n    // Add the new element to the end of the array.\r\n    this.content.push(element);\r\n    this.initContent.push(element);\r\n    this.log(\"insert \" + this.content.length);\r\n    // Allow it to bubble up.\r\n    // this.heapSort(this.content.length);\r\n  },\r\n  arr: function(index) {\r\n    return this.content[index];\r\n  },\r\n  swap: function(i, j) {\r\n    this.log(`swap`, [i, j]);\r\n    [this.content[i], this.content[j]] = [this.content[j], this.content[i]];\r\n  },\r\n  heapSort: function() {\r\n    let length = this.content.length;\r\n    let i = Math.floor(length / 2 - 1);\r\n    let k = length - 1;\r\n\r\n    while (i >= 0) {\r\n      this.log(\"First MaxHeap \" + i);\r\n      this.maxHeap(i, length);\r\n      i--;\r\n    }\r\n\r\n    while (k >= 0) {\r\n      let length = this.content.length;\r\n      this.swap(0, k);\r\n      this.log(\"remove \" + k);\r\n      let removedRoot = this.content.splice(k, 1);\r\n      this.sortedArray.push(removedRoot);\r\n      this.log(\"Second MaxHeap 0\");\r\n      this.maxHeap(0, length);\r\n      k--;\r\n    }\r\n  },\r\n  log: function(label, logNode) {\r\n    this.history.push({\r\n      label,\r\n      root: tree.getRoot(this.content, {}, 0),\r\n      logNode,\r\n      output:\r\n        this.sortedArray.length > 0 && tree.getArrayHierarchy(this.sortedArray)\r\n    });\r\n  },\r\n  maxHeap: function(i, length) {\r\n    this.log(`MaxHeap (${i})`);\r\n\r\n    let largest = i;\r\n\r\n    let left = i * 2 + 1;\r\n    let right = left + 1;\r\n\r\n    let hasLeftChild = left < length;\r\n    let hasRightChild = right < length;\r\n\r\n    if (hasLeftChild) this.log(`compare`, [left, largest]);\r\n\r\n    if (hasLeftChild && this.arr(left) > this.arr(largest)) {\r\n      largest = left;\r\n    }\r\n\r\n    if (hasRightChild) this.log(`compare`, [right, largest]);\r\n\r\n    if (hasRightChild && this.arr(right) > this.arr(largest)) {\r\n      largest = right;\r\n    }\r\n\r\n    if (largest !== i) {\r\n      this.swap(i, largest);\r\n      this.maxHeap(largest, length);\r\n    }\r\n  },\r\n  getTree: function() {\r\n    this.heapSort();\r\n    let root = tree.getRoot(this.content, {}, 0);\r\n    let initRoot = tree.getRoot(this.initContent, {}, 0);\r\n    return { root, initRoot, history: this.history };\r\n  }\r\n};\r\n\r\nexport default BinaryHeap;\r\n","import React from \"react\";\r\nimport { Group } from \"@vx/group\";\r\nimport { Tree } from \"@vx/hierarchy\";\r\nimport { LinkVertical } from \"@vx/shape\";\r\nimport { LinearGradient } from \"@vx/gradient\";\r\nimport { hierarchy } from \"d3-hierarchy\";\r\n\r\nconst peach = \"#fd9b93\";\r\nconst pink = \"#fe6e9e\";\r\nconst blue = \"#03c0dc\";\r\nconst green = \"#26deb0\";\r\nconst lightpurple = \"#3da4ab\";\r\nconst white = \"#ffffff\";\r\nconst bg = \"#4a4e4d\";\r\n\r\nconst swapColor = \"#fe8a71\";\r\nconst compareColor = \"#f6cd61\";\r\n\r\nfunction Node({ node, isSwapNode, isCompareNode }) {\r\n  const isRoot = node.depth === 0;\r\n  const isParent = !!node.children;\r\n\r\n  let statusColor = null;\r\n  if (isSwapNode === true) {\r\n    statusColor = swapColor;\r\n  } else if (isCompareNode === true) {\r\n    statusColor = compareColor;\r\n  }\r\n\r\n  if (isRoot) return <RootNode statusColor={statusColor} node={node} />;\r\n  if (isParent) return <ParentNode statusColor={statusColor} node={node} />;\r\n  //leafs\r\n  return (\r\n    <Group top={node.y} left={node.x}>\r\n      <circle\r\n        r={30}\r\n        fill={bg}\r\n        stroke={statusColor || green}\r\n        strokeWidth={1}\r\n        strokeDasharray={\"2,2\"}\r\n        strokeOpacity={0.6}\r\n        rx={10}\r\n        onClick={() => {\r\n          alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n        }}\r\n      />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        fill={green}\r\n        style={{ pointerEvents: \"none\" }}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nfunction RootNode({ node, statusColor }) {\r\n  return (\r\n    <Group\r\n      top={node.y}\r\n      left={node.x}\r\n      onClick={() => {\r\n        alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n      }}\r\n    >\r\n      <circle r={30} fill={bg} stroke={statusColor || white} />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontWeight={500}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        style={{ pointerEvents: \"none\" }}\r\n        fill={white}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nfunction ParentNode({ node, statusColor }) {\r\n  return (\r\n    <Group top={node.y} left={node.x}>\r\n      <circle\r\n        r={30}\r\n        fill={bg}\r\n        stroke={statusColor || blue}\r\n        strokeWidth={1}\r\n        onClick={() => {\r\n          alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n        }}\r\n      />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        style={{ pointerEvents: \"none\" }}\r\n        fill={white}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nexport default props => {\r\n  let width = props.width || 600;\r\n  let height = props.width || 500;\r\n  let margin = {\r\n    top: props.mt || 40,\r\n    left: props.ml || 16,\r\n    right: props.mr || 16,\r\n    bottom: props.mb || 40\r\n  };\r\n\r\n  const xMax = height - margin.top - margin.bottom;\r\n  const yMax = width - margin.left - margin.right;\r\n\r\n  const treeRoot = props.root || [];\r\n  const hierarchyRoot = hierarchy(treeRoot);\r\n  const logLabel = props.logLabel;\r\n  const logNodes = props.logNodes;\r\n\r\n  const isNodeLogged = (label, index) => {\r\n    return logLabel === label && logNodes.includes(index);\r\n  };\r\n\r\n  return (\r\n    <svg width={width} height={height}>\r\n      <LinearGradient id=\"lg\" from={peach} to={pink} />\r\n      <rect width={width} height={height} rx={14} fill={bg} />\r\n\r\n      <Group top={30} left={30}>\r\n        <text\r\n          dy={\".33em\"}\r\n          fontSize={18}\r\n          fontFamily=\"Open Sans\"\r\n          textAnchor={\"left\"}\r\n          style={{ pointerEvents: \"none\" }}\r\n          fill={white}\r\n        >\r\n          {logLabel}\r\n        </text>\r\n      </Group>\r\n      <Tree root={hierarchyRoot} size={[yMax, xMax]}>\r\n        {tree => {\r\n          return (\r\n            <Group top={margin.top} left={margin.left}>\r\n              {tree.links().map((link, i) => {\r\n                return (\r\n                  <LinkVertical\r\n                    key={`link-${i}`}\r\n                    data={link}\r\n                    stroke={lightpurple}\r\n                    strokeWidth=\"1\"\r\n                    fill=\"none\"\r\n                  />\r\n                );\r\n              })}\r\n              {tree\r\n                .descendants()\r\n                .filter(node => node.data.name || node.data.name === 0)\r\n                .map((node, i) => {\r\n                  return (\r\n                    <Node\r\n                      key={`node-${i}`}\r\n                      node={node}\r\n                      isSwapNode={isNodeLogged(\"swap\", i)}\r\n                      isCompareNode={isNodeLogged(\"compare\", i)}\r\n                    />\r\n                  );\r\n                })}\r\n            </Group>\r\n          );\r\n        }}\r\n      </Tree>\r\n    </svg>\r\n  );\r\n};\r\n","export const getRandomInt = max => Math.floor(Math.random() * Math.floor(max));\r\n\r\nexport const shuffle = (count, max) => {\r\n  let array = [];\r\n  for (let i = 0; i < count; i++) array.push(getRandomInt(max));\r\n  return array.sort(() => Math.random() - 0.5);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, Box, Typography, Paper } from \"@material-ui/core\";\r\n\r\nimport HeapSortHelper from \"../helpers/HeapSortHelper\";\r\nimport TreeViewer from \"../components/TreeViewer\";\r\n\r\nimport * as mathHelper from \"../helpers/MathHelper\";\r\n\r\nexport default () => {\r\n  const [data, setData] = React.useState();\r\n  const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress(data));\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, []);\r\n\r\n  const handleKeyPress = data => e => {\r\n    if (!data) return;\r\n    if (e.keyCode === 39) {\r\n      setActiveIndex(x => (x + 1 >= data.history.length ? x : x + 1));\r\n    } else if (e.keyCode === 37) {\r\n      setActiveIndex(x => (x - 1 < 0 ? x : x - 1));\r\n    }\r\n  };\r\n\r\n  function componentDidMount() {\r\n    var heap = new HeapSortHelper();\r\n\r\n    var sampleArray = mathHelper.shuffle(10, 100); //[83, 26, 51, 54, 41, 88, 37, 0, 49, 57]; //shuffle();\r\n\r\n    sampleArray.forEach(x => {\r\n      heap.push(x);\r\n    });\r\n\r\n    var tree = heap.getTree();\r\n\r\n    setData({\r\n      nodes: sampleArray,\r\n      root: tree.root,\r\n      initRoot: tree.initRoot,\r\n      history: [{ label: \"init\", root: tree.initRoot }, ...tree.history]\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"space-around\">\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {activeIndex}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={1}>\r\n            You can use your keyboard's (← or →) right and left arrow key to go\r\n            forward or backward.\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        {data &&\r\n          data.history\r\n            .filter((x, idx) => idx === activeIndex)\r\n            .map(x => (\r\n              <TreeViewer\r\n                logLabel={x.label}\r\n                logNodes={x.logNode}\r\n                root={x.root}\r\n              />\r\n            ))}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        {data &&\r\n          data.history\r\n            .filter((log, idx) => idx === activeIndex)\r\n            .map(log => <TreeViewer logLabel={\"Output\"} root={log.output} />)}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Box textAlign=\"center\">\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            [\r\n          </Typography>\r\n          {data &&\r\n            data.nodes.map(x => (\r\n              <Box display=\"inline\" p={1}>\r\n                <Typography variant=\"h5\" display=\"inline\">\r\n                  {x}\r\n                </Typography>\r\n              </Box>\r\n            ))}\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            ]\r\n          </Typography>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport HeapSort from \"./HeapSort\";\r\n\r\nexport default () => {\r\n  return <HeapSort />;\r\n};\r\n","import Tree from \"./Tree\";\r\n\r\nlet tree = new Tree();\r\n\r\nfunction BinaryHeapInsert() {\r\n  this.content = [];\r\n  this.initContent = [];\r\n  this.history = [];\r\n  this.sortedArray = [];\r\n}\r\n\r\nBinaryHeapInsert.prototype = {\r\n  push: function(element) {\r\n    this.log(\"insert \" + this.content.length);\r\n    this.maxHeapInsert(element);\r\n    this.initContent.push(element);\r\n  },\r\n  arr: function(index) {\r\n    return this.content[index];\r\n  },\r\n  swap: function(i, j) {\r\n    this.log(`swap`, [i, j]);\r\n    [this.content[i], this.content[j]] = [this.content[j], this.content[i]];\r\n  },\r\n  log: function(label, logNode) {\r\n    this.history.push({\r\n      label,\r\n      root: tree.getRoot(this.content, {}, 0),\r\n      logNode,\r\n      output:\r\n        this.sortedArray.length > 0 && tree.getArrayHierarchy(this.sortedArray)\r\n    });\r\n  },\r\n  getParentValue: function(i) {\r\n    let parentIndex = this.getParentIndex(i);\r\n    return this.content[parentIndex];\r\n  },\r\n  getParentIndex: function(i) {\r\n    let parentIndex = Math.ceil(i / 2) - 1;\r\n    return parentIndex;\r\n  },\r\n  maxHeapInsert: function(newNode) {\r\n    this.content.push(\"N\" + newNode);\r\n    this.log(\"Added Empty Node\");\r\n    let lastChildIndex = this.content.length - 1;\r\n\r\n    const compareNewNodeWithParent = childIndex => {\r\n      this.log(\"compare\", [childIndex, this.getParentIndex(childIndex)]);\r\n      return newNode > this.getParentValue(childIndex);\r\n    };\r\n\r\n    while (lastChildIndex > 0 && compareNewNodeWithParent(lastChildIndex)) {\r\n      this.log(\"swap\", [lastChildIndex, this.getParentIndex(lastChildIndex)]);\r\n\r\n      this.content[lastChildIndex] = this.getParentValue(lastChildIndex);\r\n      lastChildIndex = this.getParentIndex(lastChildIndex);\r\n      this.content[lastChildIndex] = \"N\" + newNode;\r\n    }\r\n\r\n    this.content[lastChildIndex] = newNode;\r\n  },\r\n  getTree: function() {\r\n    let root = tree.getRoot(this.content, {}, 0);\r\n    let initRoot = tree.getRoot(this.initContent, {}, 0);\r\n    this.log(\"done\");\r\n    return { root, initRoot, history: this.history };\r\n  }\r\n};\r\n\r\nexport default BinaryHeapInsert;\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, Box, Typography, Paper } from \"@material-ui/core\";\r\n\r\nimport TreeViewer from \"../components/TreeViewer\";\r\n\r\nimport * as mathHelper from \"../helpers/MathHelper\";\r\nimport MaxHeapInsertHelper from \"../helpers/MaxHeapInsertHelper\";\r\n\r\nexport default () => {\r\n  const [data, setData] = React.useState();\r\n  const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress(data));\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, []);\r\n\r\n  const handleKeyPress = data => e => {\r\n    if (!data) return;\r\n    if (e.keyCode === 39) {\r\n      setActiveIndex(x => (x + 1 >= data.history.length ? x : x + 1));\r\n    } else if (e.keyCode === 37) {\r\n      setActiveIndex(x => (x - 1 < 0 ? x : x - 1));\r\n    }\r\n  };\r\n\r\n  function componentDidMount() {\r\n    var heap = new MaxHeapInsertHelper();\r\n\r\n    var sampleArray = mathHelper.shuffle(10, 100); //[83, 26, 51, 54, 41, 88, 37, 0, 49, 57]; //shuffle();\r\n\r\n    sampleArray.forEach(x => {\r\n      heap.push(x);\r\n    });\r\n\r\n    var tree = heap.getTree();\r\n\r\n    setData({\r\n      nodes: sampleArray,\r\n      root: tree.root,\r\n      initRoot: tree.initRoot,\r\n      history: [{ label: \"init\", root: tree.initRoot }, ...tree.history]\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"space-around\">\r\n      <Grid item xs={2} justify=\"center\">\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {activeIndex}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={1}>\r\n            You can use your keyboard's (← or →) right and left arrow key to go\r\n            forward or backward.\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        {data &&\r\n          data.history\r\n            .filter((x, idx) => idx === activeIndex)\r\n            .map(x => (\r\n              <TreeViewer\r\n                logLabel={x.label}\r\n                logNodes={x.logNode}\r\n                root={x.root}\r\n              />\r\n            ))}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Box textAlign=\"center\">\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            [\r\n          </Typography>\r\n          {data &&\r\n            data.nodes.map(x => (\r\n              <Box display=\"inline\" p={1}>\r\n                <Typography variant=\"h5\" display=\"inline\">\r\n                  {x}\r\n                </Typography>\r\n              </Box>\r\n            ))}\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            ]\r\n          </Typography>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import Tree from \"./Tree\";\r\n\r\nlet tree = new Tree();\r\n\r\nfunction BinaryHeap() {\r\n  this.content = [];\r\n  this.initContent = [];\r\n  this.history = [];\r\n  this.sortedArray = [];\r\n}\r\n\r\nBinaryHeap.prototype = {\r\n  push: function(element) {\r\n    // Add the new element to the end of the array.\r\n    this.content.push(element);\r\n    this.initContent.push(element);\r\n    this.log(\"insert \" + this.content.length);\r\n    // Allow it to bubble up.\r\n    // this.heapSort(this.content.length);\r\n  },\r\n  arr: function(index) {\r\n    return this.content[index];\r\n  },\r\n  swap: function(i, j) {\r\n    this.log(`swap`, [i, j]);\r\n    [this.content[i], this.content[j]] = [this.content[j], this.content[i]];\r\n  },\r\n  heapSort: function() {\r\n    let length = this.content.length;\r\n    let i = Math.floor(length / 2 - 1);\r\n\r\n    while (i >= 0) {\r\n      this.maxHeapify(i, length);\r\n      i--;\r\n    }\r\n  },\r\n  log: function(label, logNode) {\r\n    this.history.push({\r\n      label,\r\n      root: tree.getRoot(this.content, {}, 0),\r\n      logNode,\r\n      output:\r\n        this.sortedArray.length > 0 && tree.getArrayHierarchy(this.sortedArray)\r\n    });\r\n  },\r\n  maxHeapify: function(i, length) {\r\n    this.log(`MaxHeap (${i})`);\r\n\r\n    let largest = i;\r\n\r\n    let left = i * 2 + 1;\r\n    let right = left + 1;\r\n\r\n    let hasLeftChild = left < length;\r\n    let hasRightChild = right < length;\r\n\r\n    if (hasLeftChild) this.log(`compare`, [left, largest]);\r\n\r\n    if (hasLeftChild && this.arr(left) > this.arr(largest)) {\r\n      largest = left;\r\n    }\r\n\r\n    if (hasRightChild) this.log(`compare`, [right, largest]);\r\n\r\n    if (hasRightChild && this.arr(right) > this.arr(largest)) {\r\n      largest = right;\r\n    }\r\n\r\n    if (largest !== i) {\r\n      this.swap(i, largest);\r\n      this.maxHeapify(largest, length);\r\n    }\r\n  },\r\n  getTree: function() {\r\n    this.heapSort();\r\n    let root = tree.getRoot(this.content, {}, 0);\r\n    let initRoot = tree.getRoot(this.initContent, {}, 0);\r\n    this.log(`done`);\r\n    return { root, initRoot, history: this.history };\r\n  }\r\n};\r\n\r\nexport default BinaryHeap;\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, Box, Typography, Paper } from \"@material-ui/core\";\r\n\r\nimport TreeViewer from \"../components/TreeViewer\";\r\n\r\nimport * as mathHelper from \"../helpers/MathHelper\";\r\nimport MaxHeapifyHelper from \"../helpers/MaxHeapifyHelper\";\r\n\r\nexport default () => {\r\n  const [data, setData] = React.useState();\r\n  const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress(data));\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, []);\r\n\r\n  const handleKeyPress = data => e => {\r\n    if (!data) return;\r\n    if (e.keyCode === 39) {\r\n      setActiveIndex(x => (x + 1 >= data.history.length ? x : x + 1));\r\n    } else if (e.keyCode === 37) {\r\n      setActiveIndex(x => (x - 1 < 0 ? x : x - 1));\r\n    }\r\n  };\r\n\r\n  function componentDidMount() {\r\n    var heap = new MaxHeapifyHelper();\r\n\r\n    var sampleArray = mathHelper.shuffle(10, 100); //[83, 26, 51, 54, 41, 88, 37, 0, 49, 57]; //shuffle();\r\n\r\n    sampleArray.forEach(x => {\r\n      heap.push(x);\r\n    });\r\n\r\n    var tree = heap.getTree();\r\n\r\n    setData({\r\n      nodes: sampleArray,\r\n      root: tree.root,\r\n      initRoot: tree.initRoot,\r\n      history: [{ label: \"init\", root: tree.initRoot }, ...tree.history]\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"space-around\">\r\n      <Grid item xs={2} justify=\"center\">\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {activeIndex}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={1}>\r\n            You can use your keyboard's (← or →) right and left arrow key to go\r\n            forward or backward.\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        {data &&\r\n          data.history\r\n            .filter((x, idx) => idx === activeIndex)\r\n            .map(x => (\r\n              <TreeViewer\r\n                logLabel={x.label}\r\n                logNodes={x.logNode}\r\n                root={x.root}\r\n              />\r\n            ))}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Box textAlign=\"center\">\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            [\r\n          </Typography>\r\n          {data &&\r\n            data.nodes.map(x => (\r\n              <Box display=\"inline\" p={1}>\r\n                <Typography variant=\"h5\" display=\"inline\">\r\n                  {x}\r\n                </Typography>\r\n              </Box>\r\n            ))}\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            ]\r\n          </Typography>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\n// import Table, {\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableRow\r\n// } from \"material-ui/Table\";\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  TextField,\r\n  IconButton,\r\n  Fab\r\n} from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    color: \"#000\"\r\n  }\r\n});\r\n\r\nclass App extends Component {\r\n  state = {\r\n    items: this.props.value || []\r\n  };\r\n\r\n  deleteItem = i => () => {\r\n    const { items } = this.state;\r\n    items.splice(i, 1);\r\n    console.log(items);\r\n    this.setState({ items });\r\n    if (this.props.onChange)\r\n      this.props.onChange(\r\n        items\r\n          .filter(x => x.arrivalTime !== \"\" && x.burstTime !== \"\")\r\n          .map(x => {\r\n            x.arrivalTime = x.arrivalTime * 1;\r\n            x.burstTime = x.burstTime * 1;\r\n            return x;\r\n          })\r\n      );\r\n  };\r\n\r\n  addItem = () => {\r\n    const { items } = this.state;\r\n    items.push({ arrivalTime: \"\", burstTime: \"\" });\r\n    this.setState({ items });\r\n    if (this.props.onChange)\r\n      this.props.onChange(\r\n        items\r\n          .filter(x => x.arrivalTime !== \"\" && x.burstTime !== \"\")\r\n          .map(x => {\r\n            x.arrivalTime = x.arrivalTime * 1;\r\n            x.burstTime = x.burstTime * 1;\r\n            return x;\r\n          })\r\n      );\r\n  };\r\n\r\n  textChange = (i, id) => e => {\r\n    const { items } = this.state;\r\n    items[i][id] = e.target.value;\r\n    this.setState({ items });\r\n    if (this.props.onChange)\r\n      this.props.onChange(\r\n        items\r\n          .filter(x => x.arrivalTime !== \"\" && x.burstTime !== \"\")\r\n          .map(x => {\r\n            x.arrivalTime = x.arrivalTime * 1;\r\n            x.burstTime = x.burstTime * 1;\r\n            return x;\r\n          })\r\n      );\r\n  };\r\n  randomHSL = () => {\r\n    return `hsla(${~~(360 * Math.random())},55%,55%,0.8)`;\r\n  };\r\n  randomHSLDark = () => {\r\n    const h = Math.floor(Math.random() * 360),\r\n      s = Math.floor(Math.random() * 100) + \"%\",\r\n      l = Math.floor(Math.random() * 60) + \"%\"; // max value of l is 100, but I set to 60 cause I want to generate dark colors\r\n    // (use for background with white/light font color)\r\n    return `hsl(${h},${s},${l})`;\r\n  };\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>#</TableCell>\r\n              <TableCell>Arrival Time</TableCell>\r\n              <TableCell>Burst Time</TableCell>\r\n              <TableCell>\r\n                <Fab\r\n                  size=\"small\"\r\n                  color=\"primary\"\r\n                  aria-label=\"add\"\r\n                  className={classes.margin}\r\n                  onClick={this.addItem}\r\n                >\r\n                  <AddIcon />\r\n                </Fab>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {this.state.items.map((item, i) => {\r\n              if (!item.color) {\r\n                item.color = this.randomHSL();\r\n                item.color = this.randomHSL();\r\n                item.color = this.randomHSL();\r\n              }\r\n              return (\r\n                <TableRow\r\n                  key={`row-${i}`}\r\n                  style={{ backgroundColor: item.color }}\r\n                >\r\n                  <TableCell>\r\n                    <b>P{i + 1}</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <TextField\r\n                      id=\"standard-basic\"\r\n                      value={item.arrivalTime}\r\n                      onChange={this.textChange(i, \"arrivalTime\")}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <TextField\r\n                      id=\"standard-basic\"\r\n                      value={item.burstTime}\r\n                      onChange={this.textChange(i, \"burstTime\")}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Fab\r\n                      size=\"small\"\r\n                      color=\"secondary\"\r\n                      onClick={this.deleteItem(i)}\r\n                      aria-label=\"add\"\r\n                      className={classes.margin}\r\n                    >\r\n                      <DeleteIcon fontSize=\"small\" />\r\n                    </Fab>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\nconst StyledApp = withStyles(styles)(App);\r\n\r\nexport default StyledApp;\r\n","import React from \"react\";\r\nimport {\r\n  LinearProgress,\r\n  ListItem,\r\n  ListItemText,\r\n  List,\r\n  Divider,\r\n  Chip,\r\n  Avatar\r\n} from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nconst ItemBorderLinearProgress = withStyles({\r\n  root: {\r\n    height: 16\r\n  }\r\n})(LinearProgress);\r\n\r\nconst getLabel = (x, isCompletedList) =>\r\n  isCompletedList\r\n    ? `W.T : ${x.waitingTime}  T.A.T : ${x.waitingTime + x.burstTime}`\r\n    : `W.T : ${x.waitingTime}`;\r\n\r\nexport default props => {\r\n  //leafs\r\n  return (\r\n    <List dense={true}>\r\n      {(props.list || []).map((x, i) => (\r\n        <React.Fragment>\r\n          <Chip\r\n            avatar={<Avatar>{x.id}</Avatar>}\r\n            label={getLabel(x, props.isCompleted)}\r\n            style={{\r\n              marginBottom: 8,\r\n              marginTop: 8,\r\n              height: 32,\r\n              fontSize: \"1.5em\"\r\n            }}\r\n          />\r\n          {!props.isCompleted && (\r\n            <ItemBorderLinearProgress\r\n              variant=\"determinate\"\r\n              value={(x.executionDuration * 100) / x.burstTime}\r\n            />\r\n          )}\r\n          <Divider />\r\n        </React.Fragment>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n","export const processState = {\r\n  IsNotArrived: \"IsNotArrived\",\r\n  IsReady: \"IsReady\", // ready queue\r\n  IsActive: \"IsActive\", // cpu queue\r\n  IsCompleted: \"IsCompleted\" // completed\r\n};\r\n\r\nfunction FCFSScheduler(tasks) {\r\n  //{arrivalTime,burstTime,waitingTime=0, state:'',excutionDuration:''}\r\n  this.tasks = tasks.map((x, i) => {\r\n    x.id = \"P\" + (i + 1);\r\n    x.waitingTime = 0;\r\n    x.executionDuration = 0;\r\n    x.state = processState.IsNotArrived;\r\n    return x;\r\n  });\r\n\r\n  this.counter = 0;\r\n  this.cpuProcessId = null;\r\n  this.history = [];\r\n  this.contextSwitch = 0;\r\n}\r\n\r\nFCFSScheduler.prototype = {\r\n  get: function(id) {\r\n    return this.tasks.find(x => x.id === id);\r\n  },\r\n  updateState: function(id, state) {\r\n    const objIndex = this.tasks.findIndex(obj => obj.id === id);\r\n    this.tasks[objIndex].state = state;\r\n  },\r\n  hasNotCompleted: function() {\r\n    return this.tasks.some(x => x.state !== processState.IsCompleted);\r\n  },\r\n  setBestCandidate: function() {\r\n    if (this.hasNotCompleted()) {\r\n      const bestProcess = this.tasks\r\n        .filter((x, i) => x.state === processState.IsReady)\r\n        .sort((first, second) => first.arrivalTime - second.arrivalTime)[0];\r\n\r\n      if (bestProcess) {\r\n        const isSwitched = this.cpuProcessId !== bestProcess.id;\r\n        if (isSwitched) this.contextSwitch++;\r\n\r\n        this.updateState(bestProcess.id, processState.IsActive);\r\n        this.cpuProcessId = bestProcess.id;\r\n        this.log(`Context Switch`);\r\n      } else if (this.cpuProcessId != null) {\r\n        this.contextSwitch++;\r\n        this.cpuProcessId = null;\r\n      }\r\n    } else {\r\n      if (this.cpuProcessId !== null) this.contextSwitch++;\r\n      this.cpuProcessId = null;\r\n      this.log(`Context Switch`);\r\n    }\r\n  },\r\n  checkCpuState: function() {\r\n    if (this.cpuProcessId !== null) {\r\n      const currentCpuProcess = this.get(this.cpuProcessId);\r\n      if (currentCpuProcess.burstTime === currentCpuProcess.executionDuration) {\r\n        this.updateState(this.cpuProcessId, processState.IsCompleted);\r\n        this.setBestCandidate();\r\n      }\r\n    } else {\r\n      this.setBestCandidate();\r\n    }\r\n  },\r\n  updateReadyQueue: function() {\r\n    const ATBiggerThanCounter = x => x.arrivalTime <= this.counter;\r\n    const isNotArrived = x => x.state === processState.IsNotArrived;\r\n\r\n    this.tasks = this.tasks.map(x => {\r\n      if (ATBiggerThanCounter(x) && isNotArrived(x))\r\n        x.state = processState.IsReady;\r\n      return x;\r\n    });\r\n\r\n    this.log(`Update Ready Queue`);\r\n  },\r\n  inCreaseCounter: function() {\r\n    this.counter++;\r\n    this.tasks = this.tasks.map(x => {\r\n      if (x.state === processState.IsActive) {\r\n        x.executionDuration++;\r\n      } else if (x.state === processState.IsReady) {\r\n        x.waitingTime++;\r\n      }\r\n      return x;\r\n    });\r\n    this.log(`Increase Counter`);\r\n  },\r\n  schdule: function(params) {\r\n    while (this.hasNotCompleted()) {\r\n      this.updateReadyQueue();\r\n\r\n      this.checkCpuState();\r\n\r\n      if (!this.hasNotCompleted()) break;\r\n\r\n      this.inCreaseCounter();\r\n    }\r\n\r\n    let waitingTimeTotal = 0;\r\n    let turnAroundTimeTotal = 0;\r\n    let totalBurstTime = 0;\r\n\r\n    for (let index = 0; index < this.tasks.length; index++) {\r\n      const x = this.tasks[index];\r\n      totalBurstTime += x.burstTime;\r\n      waitingTimeTotal += x.waitingTime;\r\n      turnAroundTimeTotal += x.waitingTime + x.burstTime;\r\n    }\r\n\r\n    const tasksCount = this.tasks.length;\r\n    console.log(tasksCount, this.counter);\r\n    this.Throughput = tasksCount / this.counter;\r\n    this.CPUUtilization = this.counter / totalBurstTime;\r\n    this.avarageWaitingTime = waitingTimeTotal / tasksCount;\r\n    this.avarageTurnAroundTimeTotal = turnAroundTimeTotal / tasksCount;\r\n  },\r\n  log: function(label) {\r\n    let cpu = null;\r\n    if (this.cpuProcessId) cpu = this.get(this.cpuProcessId);\r\n\r\n    let temp = this.tasks.map(x => ({ ...x }));\r\n\r\n    this.history.push({\r\n      label,\r\n      counter: this.counter,\r\n      tasks: temp,\r\n      cpu: cpu && { ...cpu }\r\n    });\r\n  },\r\n  getLogs: function() {\r\n    this.log(`start`);\r\n    this.schdule();\r\n\r\n    this.log(`done`);\r\n    return this.history;\r\n  },\r\n  getInfo: function() {\r\n    const info = {\r\n      contextSwitch: this.contextSwitch,\r\n      Throughput: this.Throughput,\r\n      CPUUtilization: this.CPUUtilization,\r\n      avarageWaitingTime: this.avarageWaitingTime,\r\n      avarageTurnAroundTimeTotal: this.avarageTurnAroundTimeTotal\r\n    };\r\n\r\n    console.log(info);\r\n\r\n    return info;\r\n  }\r\n};\r\n\r\nexport default FCFSScheduler;\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  LinearProgress,\r\n  Chip,\r\n  Avatar\r\n} from \"@material-ui/core\";\r\n\r\nimport ProcessTable from \"../components/ProcessTable\";\r\nimport ProcessList from \"../components/ProcessList\";\r\n\r\nimport FCFSScheduler, { processState } from \"../helpers/FCFSScheduler\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nexport default () => {\r\n  const BorderLinearProgress = withStyles({\r\n    root: {\r\n      height: 32\r\n    }\r\n  })(LinearProgress);\r\n\r\n  const [userInput, setUserInput] = React.useState([\r\n    { arrivalTime: 0, burstTime: 2 },\r\n    { arrivalTime: 0, burstTime: 2 },\r\n    { arrivalTime: 10, burstTime: 2 }\r\n  ]);\r\n\r\n  const updateInputHandler = data => {\r\n    setUserInput(data);\r\n  };\r\n\r\n  const [lastClickKeyCode, setLastClickKeyCode] = React.useState();\r\n  const [data, setData] = React.useState();\r\n  const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    if (!data) return;\r\n    if (!lastClickKeyCode) return;\r\n    if (lastClickKeyCode.keyCode === 39) {\r\n      setActiveIndex(x => (x + 1 >= data.logs.length ? x : x + 1));\r\n    } else if (lastClickKeyCode.keyCode === 37) {\r\n      setActiveIndex(x => (x - 1 < 0 ? x : x - 1));\r\n    }\r\n    setLastClickKeyCode(null);\r\n  }, [lastClickKeyCode]);\r\n\r\n  useEffect(() => {\r\n    setActiveIndex(0);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    var scheduler = new FCFSScheduler(userInput);\r\n\r\n    setData({\r\n      logs: scheduler.getLogs(),\r\n      info: scheduler.getInfo()\r\n    });\r\n  }, [userInput]);\r\n\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, []);\r\n\r\n  const handleKeyPress = e => {\r\n    if (e.keyCode === 39 || e.keyCode === 37)\r\n      setLastClickKeyCode({ keyCode: e.keyCode, date: new Date() });\r\n  };\r\n\r\n  function componentDidMount() {\r\n    var scheduler = new FCFSScheduler(userInput);\r\n\r\n    setData({\r\n      logs: scheduler.getLogs(),\r\n      info: scheduler.getInfo()\r\n    });\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n  }\r\n\r\n  const getLog = (index, prop) =>\r\n    data && index < data.logs.length && data.logs[index][prop];\r\n\r\n  const cpuProcess = getLog(activeIndex, \"cpu\");\r\n\r\n  let cpuWaitingTime = \"\";\r\n  let cpuCompleted = 0;\r\n  if (cpuProcess) {\r\n    cpuWaitingTime = `Waiting Time: ${cpuProcess.waitingTime}`;\r\n    cpuCompleted = (cpuProcess.executionDuration * 100) / cpuProcess.burstTime;\r\n  }\r\n\r\n  return (\r\n    <Grid container justify=\"space-around\" spacing={2}>\r\n      <Grid item xs={4} justify=\"center\">\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {activeIndex}\r\n        </Typography>\r\n        <Typography variant=\"h5\" display=\"inline\">\r\n          {getLog(activeIndex, \"label\")}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={8}>\r\n        <Paper>\r\n          <Box padding={1}>\r\n            You can use your keyboard's (← or →) right and left arrow key to go\r\n            forward or backward.\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <ProcessTable value={userInput} onChange={updateInputHandler} />\r\n      </Grid>\r\n      <Grid item xs={8}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Paper>\r\n              <Box p={2}>\r\n                <Typography variant=\"h6\">\r\n                  CPU ({getLog(activeIndex, \"counter\")})\r\n                </Typography>\r\n                {cpuProcess && (\r\n                  <>\r\n                    <Chip\r\n                      color=\"primary\"\r\n                      size=\"medium\"\r\n                      avatar={<Avatar> {cpuProcess && cpuProcess.id}</Avatar>}\r\n                      label={cpuWaitingTime}\r\n                      style={{ marginBottom: 8, marginTop: 8 }}\r\n                    />\r\n                    <BorderLinearProgress\r\n                      variant=\"determinate\"\r\n                      value={cpuCompleted}\r\n                    />\r\n                  </>\r\n                )}\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Paper>\r\n              <Box p={2}>\r\n                <Typography variant=\"h6\">Ready Queue</Typography>\r\n                <ProcessList\r\n                  list={(getLog(activeIndex, \"tasks\") || []).filter(\r\n                    x => x.state === processState.IsReady\r\n                  )}\r\n                />\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Paper>\r\n              <Box p={2}>\r\n                <Typography variant=\"h6\">Completed</Typography>\r\n                <ProcessList\r\n                  isCompleted\r\n                  list={(getLog(activeIndex, \"tasks\") || []).filter(\r\n                    x => x.state === processState.IsCompleted\r\n                  )}\r\n                />\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Paper>\r\n          <Box p={2}>\r\n            <Box pb={2}>\r\n              <Typography variant=\"h6\">Gantt Chart</Typography>\r\n            </Box>\r\n            <Grid container>\r\n              {((data && data.logs) || [])\r\n                .filter(\r\n                  x =>\r\n                    x.label === `Increase Counter` &&\r\n                    x.counter <= getLog(activeIndex, \"counter\")\r\n                )\r\n                .map(x => (\r\n                  <Grid item>\r\n                    <Box\r\n                      style={{\r\n                        backgroundColor: x.cpu && x.cpu.color,\r\n                        border: \"1px solid gray\"\r\n                      }}\r\n                      display=\"inline\"\r\n                      p={1.5}\r\n                    >\r\n                      {x.cpu && x.cpu.id}\r\n                    </Box>\r\n                    <Box mt={1.5} textAlign=\"right\">\r\n                      {x.counter}\r\n                    </Box>\r\n                  </Grid>\r\n                ))}\r\n            </Grid>\r\n          </Box>\r\n\r\n          {data && data.info && (\r\n            <Box m={2} p={2}>\r\n              <p>CPU utilization = {data.info.CPUUtilization}</p>\r\n              <p>Throughput = {data.info.Throughput} processes per unit time</p>\r\n              <p>Average Wait Time = {data.info.avarageWaitingTime}</p>\r\n              <p>\r\n                Average Turnaround Time = {data.info.avarageTurnAroundTimeTotal}\r\n              </p>\r\n              <p>Context Switch = {data.info.contextSwitch}</p>\r\n            </Box>\r\n          )}\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","export const processState = {\r\n  IsNotArrived: \"IsNotArrived\",\r\n  IsReady: \"IsReady\", // ready queue\r\n  IsActive: \"IsActive\", // cpu queue\r\n  IsCompleted: \"IsCompleted\" // completed\r\n};\r\n\r\nfunction RoundRobinScheduler(tasks) {\r\n  //{arrivalTime,burstTime,waitingTime=0, state:'',excutionDuration:''}\r\n  this.tasks = tasks.map((x, i) => {\r\n    x.id = \"P\" + (i + 1);\r\n    x.waitingTime = 0;\r\n    x.executionDuration = 0;\r\n    x.state = processState.IsNotArrived;\r\n    return x;\r\n  });\r\n\r\n  this.roundRobinCounter = -1;\r\n  this.counter = 0;\r\n  this.cpuProcessId = null;\r\n  this.history = [];\r\n  this.contextSwitch = 0;\r\n}\r\n\r\nRoundRobinScheduler.prototype = {\r\n  get: function(id) {\r\n    return this.tasks.find(x => x.id === id);\r\n  },\r\n  updateState: function(id, state) {\r\n    const objIndex = this.tasks.findIndex(obj => obj.id === id);\r\n    this.tasks[objIndex].state = state;\r\n  },\r\n  hasNotCompleted: function() {\r\n    return this.tasks.some(x => x.state !== processState.IsCompleted);\r\n  },\r\n  setBestCandidate: function() {\r\n    if (this.hasNotCompleted()) {\r\n      this.roundRobinCounter++;\r\n\r\n      if (\r\n        this.roundRobinCounter >=\r\n        this.tasks.filter((x, i) => x.state === processState.IsReady).length\r\n      ) {\r\n        this.roundRobinCounter = 0;\r\n      }\r\n\r\n      const bestProcess = this.tasks\r\n        .filter((x, i) => x.state === processState.IsReady)\r\n        .sort((first, second) => first.arrivalTime - second.arrivalTime)[\r\n        this.roundRobinCounter\r\n      ];\r\n\r\n      if (bestProcess) {\r\n        const isSwitched = this.cpuProcessId !== bestProcess.id;\r\n        this.updateState(bestProcess.id, processState.IsActive);\r\n        this.cpuProcessId = bestProcess.id;\r\n        this.log(`Context Switch`);\r\n        if (isSwitched) this.contextSwitch++;\r\n      } else if (this.cpuProcessId != null) {\r\n        this.cpuProcessId = null;\r\n        this.log(`Context Switch`);\r\n      }\r\n    } else {\r\n      this.cpuProcessId = null;\r\n      this.log(`Context Switch`);\r\n    }\r\n  },\r\n  checkCpuState: function() {\r\n    if (this.cpuProcessId !== null) {\r\n      const currentCpuProcess = this.get(this.cpuProcessId);\r\n      if (currentCpuProcess.burstTime === currentCpuProcess.executionDuration) {\r\n        this.updateState(this.cpuProcessId, processState.IsCompleted);\r\n        this.setBestCandidate();\r\n      } else {\r\n        this.updateState(this.cpuProcessId, processState.IsReady);\r\n        this.setBestCandidate();\r\n      }\r\n    } else {\r\n      this.setBestCandidate();\r\n    }\r\n  },\r\n  updateReadyQueue: function() {\r\n    const arrivalTimeBiggerThanCounter = x => x.arrivalTime <= this.counter;\r\n    const isNotArrived = x => x.state === processState.IsNotArrived;\r\n\r\n    this.tasks = this.tasks.map(x => {\r\n      if (arrivalTimeBiggerThanCounter(x) && isNotArrived(x))\r\n        x.state = processState.IsReady;\r\n      return x;\r\n    });\r\n\r\n    this.log(`Update Ready Queue`);\r\n  },\r\n  inCreaseCounter: function() {\r\n    this.counter++;\r\n    this.tasks = this.tasks.map(x => {\r\n      if (x.state === processState.IsActive) {\r\n        x.executionDuration++;\r\n      } else if (x.state === processState.IsReady) {\r\n        x.waitingTime++;\r\n      }\r\n      return x;\r\n    });\r\n    this.log(`Increase Counter`);\r\n  },\r\n  schdule: function() {\r\n    while (this.hasNotCompleted()) {\r\n      this.updateReadyQueue();\r\n\r\n      this.checkCpuState();\r\n\r\n      if (!this.hasNotCompleted()) break;\r\n\r\n      this.inCreaseCounter();\r\n    }\r\n\r\n    let waitingTimeTotal = 0;\r\n    let turnAroundTimeTotal = 0;\r\n    let totalBurstTime = 0;\r\n\r\n    for (let index = 0; index < this.tasks.length; index++) {\r\n      const x = this.tasks[index];\r\n      totalBurstTime += x.burstTime;\r\n      waitingTimeTotal += x.waitingTime;\r\n      turnAroundTimeTotal += x.waitingTime + x.burstTime;\r\n    }\r\n\r\n    const tasksCount = this.tasks.length;\r\n\r\n    this.Throughput = tasksCount / this.counter;\r\n    this.CPUUtilization = this.counter / totalBurstTime;\r\n    this.avarageWaitingTime = waitingTimeTotal / tasksCount;\r\n    this.avarageTurnAroundTimeTotal = turnAroundTimeTotal / tasksCount;\r\n  },\r\n  log: function(label) {\r\n    // if (label === `Context Switch`) this.contextSwitch++;\r\n\r\n    let cpu = null;\r\n    if (this.cpuProcessId) cpu = this.get(this.cpuProcessId);\r\n\r\n    let temp = this.tasks.map(x => ({ ...x }));\r\n\r\n    this.history.push({\r\n      label,\r\n      counter: this.counter,\r\n      tasks: temp,\r\n      cpu: cpu && { ...cpu }\r\n    });\r\n  },\r\n  getLogs: function() {\r\n    this.log(`start`);\r\n    this.schdule();\r\n\r\n    this.log(`done`);\r\n    return this.history;\r\n  },\r\n  getInfo: function() {\r\n    const info = {\r\n      contextSwitch: this.contextSwitch,\r\n      Throughput: this.Throughput,\r\n      CPUUtilization: this.CPUUtilization,\r\n      avarageWaitingTime: this.avarageWaitingTime,\r\n      avarageTurnAroundTimeTotal: this.avarageTurnAroundTimeTotal\r\n    };\r\n\r\n    console.log(info);\r\n\r\n    return info;\r\n  }\r\n};\r\n\r\nexport default RoundRobinScheduler;\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  LinearProgress,\r\n  Chip,\r\n  Avatar\r\n} from \"@material-ui/core\";\r\n\r\nimport ProcessTable from \"../components/ProcessTable\";\r\nimport ProcessList from \"../components/ProcessList\";\r\n\r\nimport RoundRobinScheduler, {\r\n  processState\r\n} from \"../helpers/RoundRobinScheduler\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nexport default () => {\r\n  const BorderLinearProgress = withStyles({\r\n    root: {\r\n      height: 32\r\n    }\r\n  })(LinearProgress);\r\n\r\n  const [userInput, setUserInput] = React.useState([\r\n    { arrivalTime: 0, burstTime: 2 },\r\n    { arrivalTime: 0, burstTime: 2 },\r\n    { arrivalTime: 10, burstTime: 2 }\r\n  ]);\r\n\r\n  const updateInputHandler = data => {\r\n    setUserInput(data);\r\n  };\r\n\r\n  const [lastClickKeyCode, setLastClickKeyCode] = React.useState();\r\n  const [data, setData] = React.useState();\r\n  const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    if (!data) return;\r\n    if (!lastClickKeyCode) return;\r\n    if (lastClickKeyCode.keyCode === 39) {\r\n      setActiveIndex(x => (x + 1 >= data.logs.length ? x : x + 1));\r\n    } else if (lastClickKeyCode.keyCode === 37) {\r\n      setActiveIndex(x => (x - 1 < 0 ? x : x - 1));\r\n    }\r\n    setLastClickKeyCode(null);\r\n  }, [lastClickKeyCode]);\r\n\r\n  useEffect(() => {\r\n    setActiveIndex(0);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    var scheduler = new RoundRobinScheduler(userInput);\r\n\r\n    setData({\r\n      logs: scheduler.getLogs(),\r\n      info: scheduler.getInfo()\r\n    });\r\n  }, [userInput]);\r\n\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, []);\r\n\r\n  const handleKeyPress = e => {\r\n    if (e.keyCode === 39 || e.keyCode === 37)\r\n      setLastClickKeyCode({ keyCode: e.keyCode, date: new Date() });\r\n  };\r\n\r\n  function componentDidMount() {\r\n    var scheduler = new RoundRobinScheduler(userInput);\r\n\r\n    setData({\r\n      logs: scheduler.getLogs(),\r\n      info: scheduler.getInfo()\r\n    });\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n  }\r\n\r\n  const getLog = (index, prop) =>\r\n    data && index < data.logs.length && data.logs[index][prop];\r\n\r\n  const cpuProcess = getLog(activeIndex, \"cpu\");\r\n\r\n  let cpuWaitingTime = \"\";\r\n  let cpuCompleted = 0;\r\n  if (cpuProcess) {\r\n    cpuWaitingTime = `Waiting Time: ${cpuProcess.waitingTime}`;\r\n    cpuCompleted = (cpuProcess.executionDuration * 100) / cpuProcess.burstTime;\r\n  }\r\n\r\n  return (\r\n    <Grid container justify=\"space-around\" spacing={2}>\r\n      <Grid item xs={4} justify=\"center\">\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {activeIndex}\r\n        </Typography>\r\n        <Typography variant=\"h5\" display=\"inline\">\r\n          {getLog(activeIndex, \"label\")}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={8}>\r\n        <Paper>\r\n          <Box padding={1}>\r\n            You can use your keyboard's (← or →) right and left arrow key to go\r\n            forward or backward.\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <ProcessTable value={userInput} onChange={updateInputHandler} />\r\n      </Grid>\r\n      <Grid item xs={8}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Paper>\r\n              <Box p={2}>\r\n                <Typography variant=\"h6\">\r\n                  CPU ({getLog(activeIndex, \"counter\")})\r\n                </Typography>\r\n                {cpuProcess && (\r\n                  <>\r\n                    <Chip\r\n                      color=\"primary\"\r\n                      size=\"medium\"\r\n                      avatar={<Avatar> {cpuProcess && cpuProcess.id}</Avatar>}\r\n                      label={cpuWaitingTime}\r\n                      style={{ marginBottom: 8, marginTop: 8 }}\r\n                    />\r\n                    <BorderLinearProgress\r\n                      variant=\"determinate\"\r\n                      value={cpuCompleted}\r\n                    />\r\n                  </>\r\n                )}\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Paper>\r\n              <Box p={2}>\r\n                <Typography variant=\"h6\">Ready Queue</Typography>\r\n                <ProcessList\r\n                  list={(getLog(activeIndex, \"tasks\") || []).filter(\r\n                    x => x.state === processState.IsReady\r\n                  )}\r\n                />\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Paper>\r\n              <Box p={2}>\r\n                <Typography variant=\"h6\">Completed</Typography>\r\n                <ProcessList\r\n                  isCompleted\r\n                  list={(getLog(activeIndex, \"tasks\") || []).filter(\r\n                    x => x.state === processState.IsCompleted\r\n                  )}\r\n                />\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Paper>\r\n          <Box p={2}>\r\n            <Box pb={2}>\r\n              <Typography variant=\"h6\">Gantt Chart</Typography>\r\n            </Box>\r\n            <Grid container>\r\n              {((data && data.logs) || [])\r\n                .filter(\r\n                  x =>\r\n                    x.label === `Increase Counter` &&\r\n                    x.counter <= getLog(activeIndex, \"counter\")\r\n                )\r\n                .map(x => (\r\n                  <Grid item>\r\n                    <Box\r\n                      style={{\r\n                        backgroundColor: x.cpu && x.cpu.color,\r\n                        border: \"1px solid gray\"\r\n                      }}\r\n                      display=\"inline\"\r\n                      p={1.5}\r\n                    >\r\n                      {x.cpu && x.cpu.id}\r\n                    </Box>\r\n                    <Box mt={1.5} textAlign=\"right\">\r\n                      {x.counter}\r\n                    </Box>\r\n                  </Grid>\r\n                ))}\r\n            </Grid>\r\n          </Box>\r\n          {data && data.info && (\r\n            <Box m={2} p={2}>\r\n              <p>CPU utilization = {data.info.CPUUtilization}</p>\r\n              <p>Throughput = {data.info.Throughput} processes per unit time</p>\r\n              <p>Average Wait Time = {data.info.avarageWaitingTime}</p>\r\n              <p>\r\n                Average Turnaround Time = {data.info.avarageTurnAroundTimeTotal}\r\n              </p>\r\n              <p>Context Switch = {data.info.contextSwitch}</p>\r\n            </Box>\r\n          )}\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\n\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  TextField,\r\n  Box,\r\n  Button\r\n} from \"@material-ui/core\";\r\n\r\nimport { withStyles, makeStyles } from \"@material-ui/styles\";\r\n\r\nimport classnames from \"classnames\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    color: \"#000\"\r\n  },\r\n  successText: {\r\n    \"& input\": {\r\n      color: \"#8BC34A\"\r\n    }\r\n  },\r\n  inputStyle: {\r\n    \"& input\": {\r\n      width: \"40px\"\r\n    }\r\n  },\r\n  RHSCol: {\r\n    backgroundColor: \"#696969\"\r\n  }\r\n});\r\n\r\nclass App extends Component {\r\n  state = {\r\n    items: this.props.value || [],\r\n    matrixSize: (this.props.value && this.props.value.length) || 3,\r\n    tempMatrixSize: (this.props.value && this.props.value.length) || 3\r\n  };\r\n\r\n  textChange = (i, j) => e => {\r\n    const { items } = this.state;\r\n\r\n    items[i][j] = e.target.value;\r\n    this.setState({ items });\r\n\r\n    if (this.props.onChange)\r\n      this.props.onChange(\r\n        items.map(row => {\r\n          return row.map(item => item * 1);\r\n        })\r\n      );\r\n  };\r\n\r\n  setTempMatrixSize = e => {\r\n    if (e.target.value.indexOf(\"e\") >= 0) return;\r\n    this.setState({ tempMatrixSize: e.target.value });\r\n  };\r\n\r\n  setMatrixSize = e => {\r\n    if (this.state.tempMatrixSize > 0 && this.state.tempMatrixSize < 6) {\r\n      const items = [];\r\n\r\n      for (let i = 0; i < this.state.tempMatrixSize; i++) {\r\n        const innerArray = [];\r\n        for (let j = 0; j < this.state.tempMatrixSize; j++) innerArray.push(0);\r\n        innerArray.push(0);\r\n        items.push(innerArray);\r\n      }\r\n\r\n      this.setState({ matrixSize: this.state.tempMatrixSize, items });\r\n\r\n      this.props.onChange(\r\n        items.map(row => {\r\n          return row.map(item => item * 1);\r\n        })\r\n      );\r\n    } else {\r\n      this.setState({ tempMatrixSize: this.state.matrixSize });\r\n    }\r\n  };\r\n\r\n  handleKeyDown = e => {\r\n    if (e.key === \"Enter\") {\r\n      this.setMatrixSize();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { tempMatrixSize, matrixSize } = this.state;\r\n\r\n    const textClassName = classnames({\r\n      [classes.successText]: tempMatrixSize === matrixSize\r\n    });\r\n\r\n    return (\r\n      <Paper className={classes.root}>\r\n        {!this.props.readOnly && (\r\n          <Box\r\n            p={2}\r\n            pt={1}\r\n            display=\"flex\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <TextField\r\n              id=\"standard-basic\"\r\n              label=\"matrix size\"\r\n              value={this.state.tempMatrixSize}\r\n              onChange={this.setTempMatrixSize}\r\n              className={textClassName}\r\n              type=\"number\"\r\n              helperText=\"n>0 and n<6\"\r\n              onKeyDown={this.handleKeyDown}\r\n            />\r\n            <Box>\r\n              <Button variant=\"contained\" onClick={this.setMatrixSize}>\r\n                New\r\n              </Button>\r\n            </Box>\r\n            <Box>\r\n              <Button variant=\"outlined\" onClick={() => this.props.onClick()}>\r\n                Run\r\n              </Button>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n        <Table className={classes.table}>\r\n          {/* <TableHead>\r\n            <TableRow>\r\n              <TableCell>#</TableCell>\r\n              {this.state.items.map((x, key) => (\r\n                <TableCell key={key}>j{key + 1}</TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead> */}\r\n          <TableBody>\r\n            {this.state.items.map((row, i) => {\r\n              return (\r\n                <TableRow key={`row-${i}`}>\r\n                  {/* <TableCell>\r\n                    <b>i{i + 1}</b>\r\n                  </TableCell> */}\r\n                  {row.map((innerItem, j) => (\r\n                    <React.Fragment>\r\n                      {(!this.props.readOnly || row.length - 1 > j) && (\r\n                        <TableCell\r\n                          key={j}\r\n                          className={classnames({\r\n                            [classes.RHSCol]: row.length - 1 === j\r\n                          })}\r\n                        >\r\n                          <TextField\r\n                            type=\"number\"\r\n                            className={classes.inputStyle}\r\n                            id=\"standard-basic\"\r\n                            value={innerItem}\r\n                            onChange={this.textChange(i, j)}\r\n                          />\r\n                        </TableCell>\r\n                      )}\r\n                    </React.Fragment>\r\n                  ))}\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\nconst StyledApp = withStyles(styles)(App);\r\n\r\nexport default StyledApp;\r\n","function LUDecomposition(matrix) {\r\n  this.matrix = matrix;\r\n  this.size = matrix.length;\r\n\r\n  this.yList = matrix.map(x => 0);\r\n  this.xList = matrix.map(x => 0);\r\n\r\n  this.bList = matrix.map(x => x[x.length - 1]);\r\n\r\n  this.upperTriangle = JSON.parse(JSON.stringify(matrix));\r\n  this.lowerTriangle = JSON.parse(JSON.stringify(matrix));\r\n\r\n  // initializing lowertTriangle ----------\r\n  for (let i = 0; i < this.size; i++) {\r\n    for (let j = 0; j < this.size; j++) {\r\n      if (i === j) {\r\n        this.lowerTriangle[i][j] = 1;\r\n      } else {\r\n        this.lowerTriangle[i][j] = 0;\r\n      }\r\n    }\r\n  }\r\n  // -------------------------------------\r\n}\r\n\r\nLUDecomposition.prototype = {\r\n  updateUpperTriangular: function(i, sourceI, factor) {\r\n    for (let j = 0; j < this.size; j++) {\r\n      this.upperTriangle[i][j] =\r\n        this.upperTriangle[i][j] + factor * this.upperTriangle[sourceI][j];\r\n    }\r\n  },\r\n  updateLowerTriangular: function(i, j, factor) {\r\n    this.lowerTriangle[i][j] = -factor;\r\n  },\r\n  makeLU: function() {\r\n    for (let i = 1; i < this.size; i++) {\r\n      for (let j = 0; j < i; j++) {\r\n        let sourceI = j;\r\n        var factor = -(\r\n          this.upperTriangle[i][j] / this.upperTriangle[sourceI][j]\r\n        );\r\n\r\n        this.updateUpperTriangular(i, sourceI, factor);\r\n\r\n        this.updateLowerTriangular(i, j, factor);\r\n      }\r\n    }\r\n  },\r\n\r\n  lowerTriangularSum: function(i) {\r\n    let sum = 0;\r\n    for (let j = 0; j < i; j++) {\r\n      sum += this.yList[j] * this.lowerTriangle[i][j];\r\n    }\r\n    return sum;\r\n  },\r\n  getYList: function() {\r\n    for (let i = 0; i < this.size; i++) {\r\n      this.yList[i] = this.bList[i] - this.lowerTriangularSum(i);\r\n    }\r\n  },\r\n\r\n  upperTriangularSum: function(i) {\r\n    let sum = 0;\r\n    for (let j = this.size - 1; j > i; j--) {\r\n      sum += this.xList[j] * this.upperTriangle[i][j];\r\n    }\r\n    return sum;\r\n  },\r\n  getXList: function() {\r\n    for (let i = this.size - 1; i >= 0; i--) {\r\n      var xFactor = this.upperTriangle[i][i];\r\n      this.xList[i] = (this.yList[i] - this.upperTriangularSum(i)) / xFactor;\r\n    }\r\n  },\r\n\r\n  getResult: function() {\r\n    this.makeLU();\r\n\r\n    this.getYList();\r\n\r\n    this.getXList();\r\n\r\n    return {\r\n      upperTriangle: this.upperTriangle,\r\n      lowerTriangle: this.lowerTriangle,\r\n      yList: this.yList,\r\n      xList: this.xList\r\n    };\r\n  }\r\n};\r\n\r\nexport default LUDecomposition;\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, Box, Typography, Paper, Button, Chip } from \"@material-ui/core\";\r\n\r\nimport MatrixTable from \"../components/MatrixTable\";\r\n\r\nimport LUDecompositionHelper from \"../helpers/LUDecompositionHelper\";\r\n\r\nexport default () => {\r\n  const [userInput, setUserInput] = React.useState([\r\n    [3, -7, -2, 2, -9],\r\n    [-3, 5, 1, 0, 5],\r\n    [6, -4, 0, -5, 7],\r\n    [-9, 5, -5, 12, 11]\r\n  ]);\r\n  // [1, 2, 4, 3],\r\n  // [3, 8, 14, 13],\r\n  // [2, 6, 13, 4]\r\n\r\n  const updateInputHandler = data => {\r\n    setUserInput(data);\r\n    setData(null);\r\n  };\r\n\r\n  const [data, setData] = React.useState();\r\n\r\n  // componentDidMount -------------------------------------\r\n\r\n  useEffect(() => {\r\n    // componentDidMount();\r\n  }, []);\r\n\r\n  function componentDidMount() {\r\n    var lu = new LUDecompositionHelper(userInput);\r\n    setData(lu.getResult());\r\n  }\r\n\r\n  // --------------------------------------------------------\r\n\r\n  const run = () => {\r\n    var lu = new LUDecompositionHelper(userInput);\r\n    setData(lu.getResult());\r\n  };\r\n\r\n  return (\r\n    <Grid container justify=\"space-around\" spacing={2}>\r\n      <Grid item xs={4}>\r\n        <Paper>\r\n          <Box>\r\n            <MatrixTable\r\n              value={userInput}\r\n              onChange={updateInputHandler}\r\n              onClick={run}\r\n            />\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={8}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={6}>\r\n            <Paper>\r\n              <Box p={2} mt={1}>\r\n                <Typography variant=\"h6\">Lower Triangular</Typography>\r\n                {data && (\r\n                  <MatrixTable\r\n                    key={userInput}\r\n                    value={data.lowerTriangle}\r\n                    readOnly\r\n                  />\r\n                )}\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Paper>\r\n              <Box p={2} mt={1}>\r\n                <Typography variant=\"h6\">Upper Triangular</Typography>\r\n                {data && (\r\n                  <MatrixTable\r\n                    key={userInput}\r\n                    value={data.upperTriangle}\r\n                    readOnly\r\n                  />\r\n                )}\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Paper>\r\n          <Box p={2}>\r\n            <Box pb={2}>\r\n              <Typography variant=\"h6\">Result</Typography>\r\n            </Box>\r\n            {data && (\r\n              <div>\r\n                <div display=\"block\">\r\n                  {data.yList.map((y, i) => (\r\n                    <Chip\r\n                      color=\"secondary\"\r\n                      size=\"medium\"\r\n                      label={`Y${i + 1} = ${y} `}\r\n                      style={{\r\n                        marginBottom: 8,\r\n                        marginLeft: 8,\r\n                        fontSize: \"1.3em\"\r\n                      }}\r\n                    />\r\n                  ))}\r\n                </div>\r\n                <div display=\"block\">\r\n                  {data.xList.map((x, i) => (\r\n                    <Chip\r\n                      color=\"primary\"\r\n                      size=\"medium\"\r\n                      label={`X${i + 1} = ${x} `}\r\n                      style={{\r\n                        marginBottom: 8,\r\n                        marginLeft: 8,\r\n                        fontSize: \"1.3em\"\r\n                      }}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","// https://gist.githubusercontent.com/Daniel-Hug/7273430/raw/5fef061da351ec08355f6eb305ee9d8bad2071da/arr-stat.js\r\nconst arr = {\r\n  max: function(array) {\r\n    return Math.max.apply(null, array);\r\n  },\r\n\r\n  min: function(array) {\r\n    return Math.min.apply(null, array);\r\n  },\r\n\r\n  range: function(array) {\r\n    return arr.max(array) - arr.min(array);\r\n  },\r\n\r\n  midrange: function(array) {\r\n    return arr.range(array) / 2;\r\n  },\r\n\r\n  sum: function(array) {\r\n    var num = 0;\r\n    for (var i = 0, l = array.length; i < l; i++) num += array[i];\r\n    return num;\r\n  },\r\n\r\n  mean: function(array) {\r\n    return arr.sum(array) / array.length;\r\n  },\r\n\r\n  median: function(array) {\r\n    array.sort(function(a, b) {\r\n      return a - b;\r\n    });\r\n    var mid = array.length / 2;\r\n    return mid % 1 ? array[mid - 0.5] : (array[mid - 1] + array[mid]) / 2;\r\n  },\r\n\r\n  modes: function(array) {\r\n    if (!array.length) return [];\r\n    var modeMap = {},\r\n      maxCount = 0,\r\n      modes = [];\r\n\r\n    array.forEach(function(val) {\r\n      if (!modeMap[val]) modeMap[val] = 1;\r\n      else modeMap[val]++;\r\n\r\n      if (modeMap[val] > maxCount) {\r\n        modes = [val];\r\n        maxCount = modeMap[val];\r\n      } else if (modeMap[val] === maxCount) {\r\n        modes.push(val);\r\n        maxCount = modeMap[val];\r\n      }\r\n    });\r\n    return modes;\r\n  },\r\n\r\n  variance: function(array) {\r\n    var mean = arr.mean(array);\r\n    return arr.mean(\r\n      array.map(function(num) {\r\n        return Math.pow(num - mean, 2);\r\n      })\r\n    );\r\n  },\r\n\r\n  standardDeviation: function(array) {\r\n    return Math.sqrt(arr.variance(array));\r\n  },\r\n\r\n  meanAbsoluteDeviation: function(array) {\r\n    var mean = arr.mean(array);\r\n    return arr.mean(\r\n      array.map(function(num) {\r\n        return Math.abs(num - mean);\r\n      })\r\n    );\r\n  },\r\n\r\n  zScores: function(array) {\r\n    var mean = arr.mean(array);\r\n    var standardDeviation = arr.standardDeviation(array);\r\n    return array.map(function(num) {\r\n      return (num - mean) / standardDeviation;\r\n    });\r\n  },\r\n\r\n  modifiedZScores: function(array) {\r\n    var median = arr.median(array);\r\n    var meanAbsoluteDeviation = arr.meanAbsoluteDeviation(array);\r\n    return array.map(function(num) {\r\n      return (num - median) / meanAbsoluteDeviation;\r\n    });\r\n  },\r\n  normalize_array: function(arr) {\r\n    const normalize = function(val, max, min) {\r\n      return (val - min) / (max - min);\r\n    };\r\n\r\n    var max = Math.max.apply(null, arr);\r\n    var min = Math.min.apply(null, arr);\r\n\r\n    var hold_normed_values = [];\r\n    arr.forEach(function(this_num) {\r\n      hold_normed_values.push(normalize(this_num, max, min));\r\n    });\r\n\r\n    return hold_normed_values;\r\n  },\r\n  round_to_precision: function(x, precision) {\r\n    if (!precision) return x;\r\n    var y = +x + (precision === undefined ? 0.5 : precision / 2);\r\n    return y - (y % (precision === undefined ? 1 : +precision));\r\n  }\r\n};\r\n\r\nexport default arr;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Grid, Box, Typography, Paper, Slider } from \"@material-ui/core\";\r\n\r\nimport {\r\n  XYPlot,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  LineMarkSeries as LineSeries\r\n} from \"react-vis\";\r\n\r\nimport \"react-vis/dist/style.css\";\r\n\r\nimport stat from \"../helpers/arr-stat\";\r\n\r\nfunction computeDft(input, step) {\r\n  var inreal = input.map(x => x.y);\r\n\r\n  var n = inreal.length;\r\n  var outreal = new Array(n);\r\n  var outimag = new Array(n);\r\n  var inimag = new Array(n);\r\n  inimag.fill(0);\r\n\r\n  for (var k = 0; k < n; k++) {\r\n    // For each output element\r\n    var sumreal = 0;\r\n    var sumimag = 0;\r\n    for (var t = 0; t < n; t++) {\r\n      // For each input element\r\n      var angle = (2 * Math.PI * t * k) / n;\r\n      sumreal += inreal[t] * Math.cos(angle) + inimag[t] * Math.sin(angle);\r\n      sumimag += -inreal[t] * Math.sin(angle) + inimag[t] * Math.cos(angle);\r\n    }\r\n    outreal[k] = sumreal;\r\n    outimag[k] = sumimag;\r\n  }\r\n\r\n  var result = outreal.map((x, key) => Math.hypot(outreal[key], outimag[key]));\r\n\r\n  var output = outreal.map((x, key) => ({\r\n    x: key * step,\r\n    y: result[key]\r\n  }));\r\n\r\n  return output;\r\n}\r\n\r\nfunction generateValues(wave_type, config) {\r\n  const { step, size, sinPeriodicityFactor, cosPeriodicityFactor } = config;\r\n  var yvalues = [];\r\n\r\n  for (var i = 0; i <= size; i += step) {\r\n    var y = 0;\r\n    if (wave_type === \"sin\") {\r\n      y = Math.sin((sinPeriodicityFactor * i * Math.PI) / 180);\r\n    } else if (wave_type === \"cos\") {\r\n      y = Math.cos((cosPeriodicityFactor * i * Math.PI) / 180);\r\n    } else if (wave_type === \"total\") {\r\n      y =\r\n        Math.cos((cosPeriodicityFactor * i * Math.PI) / 180) +\r\n        Math.sin((sinPeriodicityFactor * i * Math.PI) / 180);\r\n    }\r\n    yvalues.push({ x: i, y });\r\n  }\r\n  return yvalues;\r\n}\r\n\r\nexport default ({\r\n  xDomain = [0, 750],\r\n  yDomain = [-2, 2],\r\n  xAxisOn0 = false,\r\n  yAxisOn0 = true\r\n}) => {\r\n  const step = 5;\r\n  const size = 720;\r\n\r\n  const [sinPeriodicityFactor, setSinPeriodicityFactor] = useState(1);\r\n  const [cosPeriodicityFactor, setCosPeriodicityFactor] = useState(10);\r\n\r\n  const handleSinChange = (event, newValue) => {\r\n    setSinPeriodicityFactor(newValue);\r\n  };\r\n  const handleCosChange = (event, newValue) => {\r\n    setCosPeriodicityFactor(newValue);\r\n  };\r\n\r\n  const config = {\r\n    step,\r\n    size,\r\n    sinPeriodicityFactor,\r\n    cosPeriodicityFactor\r\n  };\r\n\r\n  const data = generateValues(\"sin\", config).map(x => ({ ...x, size: \"2\" }));\r\n  const data2 = generateValues(\"cos\", config).map(x => ({ ...x, size: \"2\" }));\r\n  const data3 = generateValues(\"total\", config).map(x => ({ ...x, size: \"2\" }));\r\n\r\n  const dataDft = computeDft(data, step).map(x => ({ ...x, size: \"2\" }));\r\n  const data2Dft = computeDft(data2, step).map(x => ({ ...x, size: \"2\" }));\r\n  const data3Dft = computeDft(data3, step).map(x => ({ ...x, size: \"2\" }));\r\n\r\n  // ---------------------------------------------------------------------\r\n  const maxDft = Math.max.apply(\r\n    null,\r\n    data3Dft.map(x => x.y)\r\n  );\r\n  const maxDftChartRange = stat.round_to_precision(maxDft + 10, 10);\r\n\r\n  const yDomain2 = [0, maxDftChartRange];\r\n  // ---------------------------------------------------------------------\r\n\r\n  return (\r\n    <Grid container justify=\"space-around\" spacing={2}>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={2}>\r\n            <Typography id=\"discrete-slider\" gutterBottom>\r\n              Sin({sinPeriodicityFactor}x)\r\n            </Typography>\r\n            <Slider\r\n              onChange={handleSinChange}\r\n              defaultValue={sinPeriodicityFactor}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks\r\n              min={1}\r\n              max={50}\r\n            />\r\n            <XYPlot width={500} height={200} {...{ xDomain, yDomain }}>\r\n              <VerticalGridLines />\r\n              <HorizontalGridLines />\r\n              <XAxis on0={xAxisOn0} />\r\n              <YAxis on0={yAxisOn0} />\r\n              <LineSeries\r\n                data={data}\r\n                colorType=\"literal\"\r\n                sizeType=\"literal\"\r\n                markStyle={{ fill: \"#1cd8e3\", strokeWidth: \"0\" }}\r\n              />\r\n            </XYPlot>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={2}>\r\n            <Typography variant=\"h6\" display=\"inline\">\r\n              FFT Magnitude\r\n            </Typography>\r\n            <XYPlot\r\n              width={500}\r\n              height={150}\r\n              {...{ xDomain, yDomain: yDomain2 }}\r\n            >\r\n              <VerticalGridLines />\r\n              <HorizontalGridLines />\r\n              <XAxis on0={xAxisOn0} />\r\n              <YAxis on0={yAxisOn0} />\r\n              <LineSeries\r\n                data={dataDft}\r\n                colorType=\"literal\"\r\n                sizeType=\"literal\"\r\n                markStyle={{ fill: \"#1cd8e3\", strokeWidth: \"0\" }}\r\n              />\r\n            </XYPlot>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={2}>\r\n            <Typography id=\"discrete-slider2\" gutterBottom>\r\n              Cos({cosPeriodicityFactor}x)\r\n            </Typography>\r\n            <Slider\r\n              onChange={handleCosChange}\r\n              defaultValue={cosPeriodicityFactor}\r\n              aria-labelledby=\"discrete-slider2\"\r\n              valueLabelDisplay=\"auto\"\r\n              step={1}\r\n              marks\r\n              min={1}\r\n              max={50}\r\n            />\r\n            <XYPlot width={500} height={200} {...{ xDomain, yDomain }}>\r\n              <VerticalGridLines />\r\n              <HorizontalGridLines />\r\n              <XAxis on0={xAxisOn0} />\r\n              <YAxis on0={yAxisOn0} />\r\n              <LineSeries\r\n                data={data2}\r\n                colorType=\"literal\"\r\n                sizeType=\"literal\"\r\n                markStyle={{ fill: \"#1cd8e3\", strokeWidth: \"0\" }}\r\n              />\r\n            </XYPlot>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={2}>\r\n            <Typography variant=\"h6\" display=\"inline\">\r\n              FFT Magnitude\r\n            </Typography>\r\n            <XYPlot\r\n              width={500}\r\n              height={150}\r\n              {...{ xDomain, yDomain: yDomain2 }}\r\n            >\r\n              <VerticalGridLines />\r\n              <HorizontalGridLines />\r\n              <XAxis on0={xAxisOn0} />\r\n              <YAxis on0={yAxisOn0} />\r\n              <LineSeries\r\n                data={data2Dft}\r\n                colorType=\"literal\"\r\n                sizeType=\"literal\"\r\n                markStyle={{ fill: \"#1cd8e3\", strokeWidth: \"0\" }}\r\n              />\r\n            </XYPlot>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={2}>\r\n            <Typography variant=\"h6\" display=\"inline\">\r\n              Sin({sinPeriodicityFactor}x) + Cos({cosPeriodicityFactor}x)\r\n            </Typography>\r\n            <XYPlot width={500} height={200} {...{ xDomain, yDomain }}>\r\n              <VerticalGridLines />\r\n              <HorizontalGridLines />\r\n              <XAxis on0={xAxisOn0} />\r\n              <YAxis on0={yAxisOn0} />\r\n              <LineSeries\r\n                data={data3}\r\n                colorType=\"literal\"\r\n                sizeType=\"literal\"\r\n                markStyle={{ fill: \"#1cd8e3\", strokeWidth: \"0\" }}\r\n              />\r\n            </XYPlot>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={2} mb={5}>\r\n            <Typography variant=\"h6\" display=\"inline\">\r\n              FFT Magnitude\r\n            </Typography>\r\n            <XYPlot\r\n              width={500}\r\n              height={150}\r\n              {...{ xDomain, yDomain: yDomain2 }}\r\n            >\r\n              <VerticalGridLines />\r\n              <HorizontalGridLines />\r\n              <XAxis on0={xAxisOn0} />\r\n              <YAxis on0={yAxisOn0} />\r\n              <LineSeries\r\n                data={data3Dft}\r\n                colorType=\"literal\"\r\n                sizeType=\"literal\"\r\n                markStyle={{ fill: \"#1cd8e3\", strokeWidth: \"0\" }}\r\n              />\r\n            </XYPlot>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Container, Box, Breadcrumbs, Typography } from \"@material-ui/core\";\r\n\r\nimport Menu from \"./Layout/Menu\";\r\nimport CustomAppBar from \"./Layout/CustomAppBar\";\r\n\r\nimport Home from \"./views/Home\";\r\nimport HeapSort from \"./views/HeapSort\";\r\nimport MaxHeapInsert from \"views/MaxHeapInsert\";\r\nimport MaxHeapify from \"views/MaxHeapify\";\r\nimport FCFS from \"views/FCFS\";\r\nimport RoundRobin from \"views/RoundRobin\";\r\n\r\nimport LUDecomposition from \"views/LUDecomposition\";\r\nimport FFT from \"views/FFT\";\r\n\r\nexport default function App() {\r\n  const [drawer, setDrawerState] = React.useState(false);\r\n\r\n  const toggleDrawer = open => event => {\r\n    if (\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setDrawerState(open);\r\n  };\r\n\r\n  function getBreadcrumbs(props) {\r\n    let routeNames = props.match.url\r\n      .substring(1)\r\n      .replace(/-/g, \" \")\r\n      .split(\"/\");\r\n\r\n    return (\r\n      <Breadcrumbs aria-label=\"breadcrumb\">\r\n        {routeNames.map(x => (\r\n          <Typography key={x} variant={6}>\r\n            {x}\r\n          </Typography>\r\n        ))}\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Router basename=\"/\">\r\n      <Menu drawer={drawer} onClose={toggleDrawer(false)} />\r\n      <CustomAppBar onClick={toggleDrawer(true)} />\r\n      <Box pt={2} pl={2}>\r\n        {<Route path=\"*\" component={getBreadcrumbs} />}\r\n      </Box>\r\n      <Container>\r\n        <Box pt={1}>\r\n          <Switch>\r\n            <Route path=\"/Advanced-OperatingSystem/FCFS\">\r\n              <FCFS />\r\n            </Route>\r\n            <Route path=\"/Advanced-OperatingSystem/Round-Robin\">\r\n              <RoundRobin />\r\n            </Route>\r\n            <Route path=\"/Advanced-Algorithms/Max-Heap-Insert\">\r\n              <MaxHeapInsert />\r\n            </Route>\r\n            <Route path=\"/Advanced-Algorithms/Max-Heapify\">\r\n              <MaxHeapify />\r\n            </Route>\r\n            <Route path=\"/Advanced-Algorithms/Heap-Sort\">\r\n              <HeapSort />\r\n            </Route>\r\n            <Route path=\"/Advanced-Algorithms/LU-Decomposition\">\r\n              <LUDecomposition />\r\n            </Route>\r\n            <Route path=\"/Advanced-Algorithms/FFT\">\r\n              <FFT />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </Box>\r\n      </Container>\r\n    </Router>\r\n  );\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport pink from \"@material-ui/core/colors/pink\";\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\",\n    primary: blue,\n    secondary: pink\n  }\n});\n\nexport default theme;\n","import React from \"react\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { StylesProvider, jssPreset } from \"@material-ui/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { create } from \"jss\";\n\nimport Router from \"../Router\";\nimport theme from \"./theme\";\n\n// Configure JSS\nconst jss = create({ plugins: [...jssPreset().plugins] });\n\nconst AppTheme = props => (\n  <MuiThemeProvider theme={theme}>\n    <StylesProvider jss={jss}>\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <Router />\n    </StylesProvider>\n  </MuiThemeProvider>\n);\n\nexport default AppTheme;\n","import React from \"react\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store/storeProvider\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport AppTheme from \"./Layout/AppTheme\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppTheme />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}