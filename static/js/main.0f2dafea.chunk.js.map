{"version":3,"sources":["api/urls.js","api/apiInstance.js","api/filterResponse.js","api/city/city-api.js","components/CityPicker.js","views/Form1.js","App.js","serviceWorker.js","index.js"],"names":["BASEURL","PROVINCES","apiInstance","axios","create","timeout","withCredentials","catchError","error","Promise","resolve","response","data","status","filterResponse","includes","getProvinces","api","get","urls","then","catch","getCities","provinceId","concat","getDistricts","cityId","CityPicker","emptyOptions","provinceOptions","cityOptions","districtOptions","state","isLoading","selectedProvince","selectedCity","selectedDistrict","_this","handleChange","prop","value","resetedDate","getResetedData","props","onChange","_this$state","newState","Object","objectSpread","defineProperty","setState","getSubItems","selectedProp","getCityOptions","getDistrictOptions","cityApi","r","console","warn","mapToInputOptions","_this$state2","getProvinceOptions","map","x","label","slug","id","this","_this$state3","_this$props","provinceColSize","cityColSize","districtColSize","react_default","a","createElement","Fragment","className","react_select_browser_esm","options","isDisabled","Component","defaultProps","HomePage","log","components_CityPicker","App","Form1","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f2dafea.chunk.js","sourcesContent":["export const BASEURL = \"https://api.tavanito.com\";\r\n\r\nexport const APIVERSION = \"/v1\";\r\n\r\nexport const BASEAPIURL = BASEURL + APIVERSION;\r\n\r\n//provinces\r\nexport const PROVINCES = BASEURL + APIVERSION + \"/provinces\";","import axios from 'axios';\r\n\r\nconst apiInstance = axios.create({\r\n    timeout: 10000,\r\n    // `withCredentials` indicates whether or not cross-site Access-Control requests\r\n    // should be made using credentials\r\n    //'Access-Control-Allow-Origin' header\r\n    withCredentials: false\r\n});\r\n\r\nexport default apiInstance;\r\n","export const catchError = error =>\r\n  new Promise(resolve => {\r\n    if (error.response) {\r\n      resolve({ error: true, data: error.response.data, status: error.response.status });\r\n    } else {\r\n      resolve({ error: true, data: error, status: error.status });\r\n    }\r\n  });\r\n\r\nexport const filterResponse = response =>\r\n  new Promise(resolve => {\r\n    if ([200, 201].includes(response.status)) {\r\n      return resolve({ error: false, data: response.data, status: response.status });\r\n    }\r\n    return resolve({ error: true, data: response.data, status: response.status });\r\n  });\r\n\r\nexport default filterResponse;\r\n","import * as urls from \"../urls\";\r\nimport api from \"../apiInstance\";\r\nimport { filterResponse, catchError } from \"../filterResponse\";\r\n\r\nexport const getProvinces = () => api.get(urls.PROVINCES).then(filterResponse).catch(catchError);\r\n\r\nexport const getCities = (provinceId) => api.get(urls.PROVINCES + `/${provinceId}/cities`).then(filterResponse).catch(catchError);\r\n\r\nexport const getDistricts = (provinceId, cityId) => api.get(urls.PROVINCES + `/${provinceId}/cities/${cityId}/districts`).then(filterResponse).catch(catchError);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Select from 'react-select';\r\nimport * as cityApi from '../api/city/city-api';\r\n\r\nclass CityPicker extends Component {\r\n\r\n  static defaultProps = {\r\n    provinceColSize: 4,\r\n    cityColSize: 4,\r\n    districtColSize: 4\r\n  };\r\n\r\n  emptyOptions = {\r\n    provinceOptions: [],\r\n    cityOptions: [],\r\n    districtOptions: [],\r\n  }\r\n\r\n  state = {\r\n    isLoading: true,\r\n    selectedProvince: \"\",\r\n    selectedCity: \"\",\r\n    selectedDistrict: \"\",\r\n    ...this.emptyOptions\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getProvinceOptions();\r\n  }\r\n\r\n  handleChange = (prop) => (value) => {\r\n\r\n    const resetedDate = this.getResetedData(prop);\r\n\r\n    if (this.props.onChange) {\r\n\r\n      const { selectedProvince, selectedCity, selectedDistrict } = this.state;\r\n\r\n      const newState = {\r\n        selectedProvince, selectedCity, selectedDistrict, ...resetedDate,\r\n        [prop]: value\r\n      };\r\n\r\n      this.props.onChange(newState);\r\n    }\r\n\r\n    this.setState({ [prop]: value, ...resetedDate }, this.getSubItems(prop));\r\n  }\r\n\r\n  getResetedData = (selectedProp) => {\r\n    switch (selectedProp) {\r\n      case 'selectedProvince':\r\n        return { selectedCity: '', selectedDistrict: '' };\r\n      case 'selectedCity':\r\n        return { selectedDistrict: '' };\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  getSubItems = (selectedProp) => () => {\r\n    switch (selectedProp) {\r\n      case 'selectedProvince':\r\n        this.getCityOptions();\r\n        break;\r\n      case 'selectedCity':\r\n        this.getDistrictOptions();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  getCityOptions = () => {\r\n\r\n    const selectedProvince = this.state.selectedProvince;\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    cityApi.getCities(selectedProvince.value).then(r => {\r\n\r\n      if (r.error) {\r\n        console.warn(r.data);\r\n        this.setState({ isLoading: false });\r\n        return;\r\n      }\r\n\r\n      this.setState({ isLoading: false, cityOptions: this.mapToInputOptions(r.data.data) });\r\n    });\r\n  }\r\n\r\n  getDistrictOptions = () => {\r\n\r\n    const { selectedProvince, selectedCity } = this.state;\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    cityApi.getDistricts(selectedProvince.value, selectedCity.value).then(r => {\r\n\r\n      if (r.error) {\r\n        console.warn(r.data);\r\n        this.setState({ isLoading: false });\r\n        return;\r\n      }\r\n\r\n      this.setState({ isLoading: false, districtOptions: this.mapToInputOptions(r.data.data) });\r\n    });\r\n\r\n  }\r\n\r\n  getProvinceOptions = () => {\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    cityApi.getProvinces().then(r => {\r\n\r\n      this.setState({ isLoading: false, provinceOptions: this.mapToInputOptions(r.data.data) });\r\n    });\r\n\r\n  }\r\n\r\n  mapToInputOptions = (data) => data.map((x) => ({ label: x.slug, value: x.id }));\r\n\r\n  render() {\r\n\r\n    const { selectedProvince, selectedCity, selectedDistrict, isLoading,\r\n      provinceOptions, cityOptions, districtOptions } = this.state;\r\n\r\n    const { provinceColSize, cityColSize, districtColSize } = this.props;\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className={`col-${provinceColSize}`}>\r\n          <label>Province</label>\r\n          <Select\r\n            value={selectedProvince}\r\n            onChange={this.handleChange('selectedProvince')}\r\n            options={provinceOptions}\r\n            isDisabled={isLoading}\r\n          />\r\n        </div>\r\n        <div className={`col-${cityColSize}`}>\r\n          <label>City</label>\r\n          <Select\r\n            value={selectedCity}\r\n            onChange={this.handleChange('selectedCity')}\r\n            options={cityOptions}\r\n            isDisabled={isLoading || !selectedProvince}\r\n          />\r\n\r\n        </div>\r\n        <div className={`col-${districtColSize}`}>\r\n          <label>District</label>\r\n          <Select\r\n            value={selectedDistrict}\r\n            onChange={this.handleChange('selectedDistrict')}\r\n            options={districtOptions}\r\n            isDisabled={isLoading || !selectedCity}\r\n          />\r\n        </div>\r\n\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nconst sizeOptions = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n\r\nCityPicker.propTypes = {\r\n  cityColSize: PropTypes.oneOf(sizeOptions),\r\n  provinceColSize: PropTypes.oneOf(sizeOptions),\r\n  districtColSize: PropTypes.oneOf(sizeOptions),\r\n};\r\n\r\nexport default CityPicker;\r\n","import React, { Component } from 'react';\nimport CityPicker from '../components/CityPicker';\n\nclass HomePage extends Component {\n\n  handleChange = (data) => {\n    console.log(data);\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        <div className=\"row\">\n          <CityPicker provinceColSize={5} cityColSize={3} onChange={this.handleChange} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;","import React from 'react';\nimport Form1 from './views/Form1'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className='container mt-4 mb-4'>\n        <h5 className=\"display-1\">MBERNETI TEST</h5>\n      </div>\n      <Form1 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}