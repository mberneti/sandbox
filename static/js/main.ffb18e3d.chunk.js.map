{"version":3,"sources":["store/todo.redux.js","store/storeProvider.js","serviceWorker.js","Layout/Menu.js","Layout/CustomAppBar.js","helpers/Tree.js","helpers/HeapSortHelper.js","components/TreeViewer.js","helpers/MathHelper.js","views/HeapSort.js","views/Home.js","helpers/MaxHeapInsertHelper.js","views/MaxHeapInsert.js","helpers/MaxHeapifyHelper.js","views/MaxHeapify.js","components/ProcessTable.js","components/ProcessList.js","helpers/FCFSScheduler.js","views/FCFS.js","Router.js","Layout/theme.js","Layout/AppTheme.js","index.js"],"names":["todos","state","action","type","id","text","completed","map","todo","rootReducer","combineReducers","store","createStore","Boolean","window","location","hostname","match","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","nested","paddingLeft","spacing","App","props","classes","React","useState","open","setOpen","handleClick","getSubMenu","list","Collapse","in","timeout","unmountOnExit","List","x","ListItem","key","title","button","component","Link","to","path","className","ListItemText","primary","Drawer","drawer","onClose","aria-labelledby","subheader","ListSubheader","onClick","flexGrow","menuButton","marginRight","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","commponent","target","href","Node","val","this","name","children","Array","fill","Tree","lastNode","index","prototype","getArrayTree","arr","i","length","getArrayHierarchy","getRoot","insertLevelOrder","left","right","splice","tree","BinaryHeap","content","initContent","history","sortedArray","push","element","log","swap","j","heapSort","Math","floor","k","maxHeap","removedRoot","label","logNode","output","largest","hasLeftChild","hasRightChild","getTree","initRoot","blue","green","white","bg","swapColor","compareColor","node","isSwapNode","isCompareNode","isRoot","depth","isParent","statusColor","RootNode","ParentNode","Group","top","y","r","stroke","strokeWidth","strokeDasharray","strokeOpacity","rx","alert","JSON","stringify","data","dy","fontSize","fontFamily","textAnchor","style","pointerEvents","fontWeight","height","margin","mt","ml","mr","bottom","mb","xMax","yMax","treeRoot","hierarchyRoot","hierarchy","logLabel","logNodes","isNodeLogged","includes","LinearGradient","from","size","links","link","LinkVertical","descendants","filter","getRandomInt","max","random","shuffle","count","array","sort","setData","activeIndex","setActiveIndex","useEffect","document","addEventListener","handleKeyPress","heap","HeapSortHelper","sampleArray","mathHelper","forEach","nodes","componentDidMount","e","keyCode","Grid","container","alignItems","justify","item","xs","display","Paper","Box","padding","idx","TreeViewer","textAlign","p","HeapSort","BinaryHeapInsert","maxHeapInsert","getParentValue","parentIndex","getParentIndex","ceil","newNode","childIndex","lastChildIndex","MaxHeapInsertHelper","maxHeapify","MaxHeapifyHelper","items","value","deleteItem","console","setState","onChange","arrivalTime","burstTime","addItem","textChange","randomHSL","randomHSLDark","h","s","l","Table","table","TableHead","TableRow","TableCell","Fab","TableBody","TextField","Component","StyledApp","withStyles","marginTop","overflowX","ItemBorderLinearProgress","LinearProgress","dense","Fragment","Chip","avatar","Avatar","waitingTime","marginBottom","isCompleted","executionDuration","Divider","processState","IsNotArrived","IsReady","IsActive","IsCompleted","FCFSScheduler","tasks","counter","cpuProcessId","get","find","updateState","objIndex","findIndex","obj","hasNotCompleted","some","setBestCandidate","bestProcess","first","second","checkCpuState","currentCpuProcess","updateReadyQueue","ATBiggerThanCounter","isNotArrived","inCreaseCounter","schdule","params","cpu","temp","getLogs","BorderLinearProgress","userInput","setUserInput","lastClickKeyCode","setLastClickKeyCode","logs","scheduler","date","Date","getLog","prop","cpuProcess","cpuWaitingTime","cpuCompleted","ProcessTable","ProcessList","pb","border","setDrawerState","toggleDrawer","event","basename","CustomAppBar","pt","pl","routeNames","url","substring","replace","split","Breadcrumbs","Container","FCFS","MaxHeapInsert","MaxHeapify","Home","createMuiTheme","jss","create","plugins","jssPreset","AppTheme","StylesProvider","CssBaseline","ReactDOM","render","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffb18e3d.chunk.js","sourcesContent":["let nextTodoId = 0;\r\nexport const addTodo = text => ({\r\n  type: \"ADD_TODO\",\r\n  id: nextTodoId++,\r\n  text\r\n});\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n  type: \"SET_VISIBILITY_FILTER\",\r\n  filter\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: \"TOGGLE_TODO\",\r\n  id\r\n});\r\n\r\nexport const VisibilityFilters = {\r\n  SHOW_ALL: \"SHOW_ALL\",\r\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\r\n  SHOW_ACTIVE: \"SHOW_ACTIVE\"\r\n};\r\n\r\n// reducer ----------------------------------------------------------------\r\nconst todos = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TODO\":\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          completed: false\r\n        }\r\n      ];\r\n    case \"TOGGLE_TODO\":\r\n      return state.map(todo =>\r\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default todos;\r\n\r\n// ------------------------------------------------\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport todos from \"./todo.redux\";\r\nconst rootReducer = combineReducers({ todos });\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport {\r\n  List,\r\n  ListSubheader,\r\n  ListItem,\r\n  ListItemText,\r\n  Collapse,\r\n  Drawer\r\n} from \"@material-ui/core\";\r\n\r\nimport ExpandLess from \"@material-ui/icons/ExpandLess\";\r\nimport ExpandMore from \"@material-ui/icons/ExpandMore\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4)\r\n  }\r\n}));\r\n\r\nexport default function App(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(\"\");\r\n\r\n  const handleClick = id => () => {\r\n    if (open === id) id = \"\";\r\n    setOpen(id);\r\n  };\r\n\r\n  const getSubMenu = (id, list) => (\r\n    <Collapse in={open === id} timeout=\"auto\" unmountOnExit>\r\n      <List>\r\n        {list.map(x => (\r\n          <ListItem\r\n            key={x.title}\r\n            button\r\n            component={Link}\r\n            to={\"/\" + id + \"/\" + x.path}\r\n            className={classes.nested}\r\n          >\r\n            <ListItemText primary={x.title} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Collapse>\r\n  );\r\n\r\n  return (\r\n    <Drawer open={props.drawer} onClose={props.onClose}>\r\n      <List\r\n        component=\"nav\"\r\n        aria-labelledby=\"nested-list-subheader\"\r\n        subheader={\r\n          <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n            Topics\r\n          </ListSubheader>\r\n        }\r\n        className={classes.root}\r\n      >\r\n        <ListItem button onClick={handleClick(\"Advanced-Algorithms\")}>\r\n          <ListItemText primary=\"Advanced Algorithms\" />\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </ListItem>\r\n        {getSubMenu(\"Advanced-Algorithms\", [\r\n          { path: \"Max-Heap-Insert\", title: \"Max Heap Insert\" },\r\n          { path: \"Max-Heapify\", title: \"Max Heapify\" },\r\n          { path: \"Heap-Sort\", title: \"Heap Sort\" },\r\n          { path: \"Binomial-Heaps\", title: \"Binomial Heaps\" }\r\n        ])}\r\n\r\n        <ListItem button onClick={handleClick(\"Advanced-OperatingSystem\")}>\r\n          <ListItemText primary=\"Advanced Operating System\" />\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </ListItem>\r\n        {getSubMenu(\"Advanced-OperatingSystem\", [\r\n          { path: \"FCFS\", title: \"FCFS\" }\r\n        ])}\r\n\r\n        <ListItem button onClick={handleClick(\"Advanced-Compiler\")}>\r\n          <ListItemText primary=\"Advanced Compiler\" />\r\n          {open ? <ExpandLess /> : <ExpandMore />}\r\n        </ListItem>\r\n        {getSubMenu(\"Advanced-Compiler\", [\r\n          { path: \"compiler1\", title: \"compiler1\" }\r\n        ])}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nexport default props => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <IconButton\r\n          edge=\"start\"\r\n          className={classes.menuButton}\r\n          color=\"inherit\"\r\n          aria-label=\"menu\"\r\n          onClick={props.onClick}\r\n        >\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          Berneti Projects\r\n        </Typography>\r\n        <Button\r\n          commponent={Link}\r\n          target=\"_blank\"\r\n          href=\"https://github.com/mberneti/sandbox\"\r\n          color=\"inherit\"\r\n        >\r\n          Open On Github\r\n        </Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n","function Node(val) {\r\n  this.name = val;\r\n  this.children = Array(2).fill(null);\r\n}\r\n\r\nfunction Tree() {\r\n  this.root = null;\r\n  this.lastNode = null;\r\n  this.index = 0;\r\n}\r\n\r\nTree.prototype.getArrayTree = function(arr, i) {\r\n  if (!i && i !== 0) i = 0;\r\n\r\n  let root = { name: arr[i] + \"\" };\r\n  if (i + 1 >= arr.length) return root;\r\n  if (!root) root = { name: arr[i] + \"\" };\r\n  root.children = [this.getArrayTree(arr, i + 1)];\r\n  return root;\r\n};\r\n\r\nTree.prototype.getArrayHierarchy = function(arr) {\r\n  return this.getArrayTree(arr);\r\n};\r\n\r\nTree.prototype.getRoot = function(arr, root, i) {\r\n  return this.insertLevelOrder(arr, root, i);\r\n};\r\n\r\nTree.prototype.insertLevelOrder = function(arr, root, i) {\r\n  // Base case for recursion\r\n\r\n  if (i < arr.length) {\r\n    var temp = new Node(arr[i]);\r\n    root = temp;\r\n    // insert left child\r\n    root.children[0] = this.insertLevelOrder(arr, root.left, 2 * i + 1);\r\n    // insert right child\r\n    root.children[1] = this.insertLevelOrder(arr, root.right, 2 * i + 2);\r\n  }\r\n\r\n  if (root && root.children) {\r\n    if (!root.children[0] && !root.children[1]) delete root.children;\r\n    else if (!root.children[0]) root.children.splice(0, 1);\r\n    else if (!root.children[1]) root.children.splice(1, 1);\r\n  }\r\n\r\n  return root;\r\n};\r\n\r\nexport default Tree;\r\n","import Tree from \"./Tree\";\r\n\r\nlet tree = new Tree();\r\n\r\nfunction BinaryHeap() {\r\n  this.content = [];\r\n  this.initContent = [];\r\n  this.history = [];\r\n  this.sortedArray = [];\r\n}\r\n\r\nBinaryHeap.prototype = {\r\n  push: function(element) {\r\n    // Add the new element to the end of the array.\r\n    this.content.push(element);\r\n    this.initContent.push(element);\r\n    this.log(\"insert \" + this.content.length);\r\n    // Allow it to bubble up.\r\n    // this.heapSort(this.content.length);\r\n  },\r\n  arr: function(index) {\r\n    return this.content[index];\r\n  },\r\n  swap: function(i, j) {\r\n    this.log(`swap`, [i, j]);\r\n    [this.content[i], this.content[j]] = [this.content[j], this.content[i]];\r\n  },\r\n  heapSort: function() {\r\n    let length = this.content.length;\r\n    let i = Math.floor(length / 2 - 1);\r\n    let k = length - 1;\r\n\r\n    while (i >= 0) {\r\n      this.log(\"First MaxHeap \" + i);\r\n      this.maxHeap(i, length);\r\n      i--;\r\n    }\r\n\r\n    while (k >= 0) {\r\n      let length = this.content.length;\r\n      this.swap(0, k);\r\n      this.log(\"remove \" + k);\r\n      let removedRoot = this.content.splice(k, 1);\r\n      this.sortedArray.push(removedRoot);\r\n      this.log(\"Second MaxHeap 0\");\r\n      this.maxHeap(0, length);\r\n      k--;\r\n    }\r\n  },\r\n  log: function(label, logNode) {\r\n    this.history.push({\r\n      label,\r\n      root: tree.getRoot(this.content, {}, 0),\r\n      logNode,\r\n      output:\r\n        this.sortedArray.length > 0 && tree.getArrayHierarchy(this.sortedArray)\r\n    });\r\n  },\r\n  maxHeap: function(i, length) {\r\n    this.log(`MaxHeap (${i})`);\r\n\r\n    let largest = i;\r\n\r\n    let left = i * 2 + 1;\r\n    let right = left + 1;\r\n\r\n    let hasLeftChild = left < length;\r\n    let hasRightChild = right < length;\r\n\r\n    if (hasLeftChild) this.log(`compare`, [left, largest]);\r\n\r\n    if (hasLeftChild && this.arr(left) > this.arr(largest)) {\r\n      largest = left;\r\n    }\r\n\r\n    if (hasRightChild) this.log(`compare`, [right, largest]);\r\n\r\n    if (hasRightChild && this.arr(right) > this.arr(largest)) {\r\n      largest = right;\r\n    }\r\n\r\n    if (largest !== i) {\r\n      this.swap(i, largest);\r\n      this.maxHeap(largest, length);\r\n    }\r\n  },\r\n  getTree: function() {\r\n    this.heapSort();\r\n    let root = tree.getRoot(this.content, {}, 0);\r\n    let initRoot = tree.getRoot(this.initContent, {}, 0);\r\n    return { root, initRoot, history: this.history };\r\n  }\r\n};\r\n\r\nexport default BinaryHeap;\r\n","import React from \"react\";\r\nimport { Group } from \"@vx/group\";\r\nimport { Tree } from \"@vx/hierarchy\";\r\nimport { LinkVertical } from \"@vx/shape\";\r\nimport { LinearGradient } from \"@vx/gradient\";\r\nimport { hierarchy } from \"d3-hierarchy\";\r\n\r\nconst peach = \"#fd9b93\";\r\nconst pink = \"#fe6e9e\";\r\nconst blue = \"#03c0dc\";\r\nconst green = \"#26deb0\";\r\nconst lightpurple = \"#3da4ab\";\r\nconst white = \"#ffffff\";\r\nconst bg = \"#4a4e4d\";\r\n\r\nconst swapColor = \"#fe8a71\";\r\nconst compareColor = \"#f6cd61\";\r\n\r\nfunction Node({ node, isSwapNode, isCompareNode }) {\r\n  const isRoot = node.depth === 0;\r\n  const isParent = !!node.children;\r\n\r\n  let statusColor = null;\r\n  if (isSwapNode === true) {\r\n    statusColor = swapColor;\r\n  } else if (isCompareNode === true) {\r\n    statusColor = compareColor;\r\n  }\r\n\r\n  if (isRoot) return <RootNode statusColor={statusColor} node={node} />;\r\n  if (isParent) return <ParentNode statusColor={statusColor} node={node} />;\r\n  //leafs\r\n  return (\r\n    <Group top={node.y} left={node.x}>\r\n      <circle\r\n        r={30}\r\n        fill={bg}\r\n        stroke={statusColor || green}\r\n        strokeWidth={1}\r\n        strokeDasharray={\"2,2\"}\r\n        strokeOpacity={0.6}\r\n        rx={10}\r\n        onClick={() => {\r\n          alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n        }}\r\n      />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        fill={green}\r\n        style={{ pointerEvents: \"none\" }}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nfunction RootNode({ node, statusColor }) {\r\n  return (\r\n    <Group\r\n      top={node.y}\r\n      left={node.x}\r\n      onClick={() => {\r\n        alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n      }}\r\n    >\r\n      <circle r={30} fill={bg} stroke={statusColor || white} />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontWeight={500}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        style={{ pointerEvents: \"none\" }}\r\n        fill={white}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nfunction ParentNode({ node, statusColor }) {\r\n  return (\r\n    <Group top={node.y} left={node.x}>\r\n      <circle\r\n        r={30}\r\n        fill={bg}\r\n        stroke={statusColor || blue}\r\n        strokeWidth={1}\r\n        onClick={() => {\r\n          alert(`clicked: ${JSON.stringify(node.data.name)}`);\r\n        }}\r\n      />\r\n      <text\r\n        dy={\".33em\"}\r\n        fontSize={24}\r\n        fontFamily=\"Open Sans\"\r\n        textAnchor={\"middle\"}\r\n        style={{ pointerEvents: \"none\" }}\r\n        fill={white}\r\n      >\r\n        {node.data.name}\r\n      </text>\r\n    </Group>\r\n  );\r\n}\r\n\r\nexport default props => {\r\n  let width = props.width || 600;\r\n  let height = props.width || 500;\r\n  let margin = {\r\n    top: props.mt || 40,\r\n    left: props.ml || 16,\r\n    right: props.mr || 16,\r\n    bottom: props.mb || 40\r\n  };\r\n\r\n  const xMax = height - margin.top - margin.bottom;\r\n  const yMax = width - margin.left - margin.right;\r\n\r\n  const treeRoot = props.root || [];\r\n  const hierarchyRoot = hierarchy(treeRoot);\r\n  const logLabel = props.logLabel;\r\n  const logNodes = props.logNodes;\r\n\r\n  const isNodeLogged = (label, index) => {\r\n    return logLabel === label && logNodes.includes(index);\r\n  };\r\n\r\n  return (\r\n    <svg width={width} height={height}>\r\n      <LinearGradient id=\"lg\" from={peach} to={pink} />\r\n      <rect width={width} height={height} rx={14} fill={bg} />\r\n\r\n      <Group top={30} left={30}>\r\n        <text\r\n          dy={\".33em\"}\r\n          fontSize={18}\r\n          fontFamily=\"Open Sans\"\r\n          textAnchor={\"left\"}\r\n          style={{ pointerEvents: \"none\" }}\r\n          fill={white}\r\n        >\r\n          {logLabel}\r\n        </text>\r\n      </Group>\r\n      <Tree root={hierarchyRoot} size={[yMax, xMax]}>\r\n        {tree => {\r\n          return (\r\n            <Group top={margin.top} left={margin.left}>\r\n              {tree.links().map((link, i) => {\r\n                return (\r\n                  <LinkVertical\r\n                    key={`link-${i}`}\r\n                    data={link}\r\n                    stroke={lightpurple}\r\n                    strokeWidth=\"1\"\r\n                    fill=\"none\"\r\n                  />\r\n                );\r\n              })}\r\n              {tree\r\n                .descendants()\r\n                .filter(node => node.data.name || node.data.name === 0)\r\n                .map((node, i) => {\r\n                  return (\r\n                    <Node\r\n                      key={`node-${i}`}\r\n                      node={node}\r\n                      isSwapNode={isNodeLogged(\"swap\", i)}\r\n                      isCompareNode={isNodeLogged(\"compare\", i)}\r\n                    />\r\n                  );\r\n                })}\r\n            </Group>\r\n          );\r\n        }}\r\n      </Tree>\r\n    </svg>\r\n  );\r\n};\r\n","export const getRandomInt = max => Math.floor(Math.random() * Math.floor(max));\r\n\r\nexport const shuffle = (count, max) => {\r\n  let array = [];\r\n  for (let i = 0; i < count; i++) array.push(getRandomInt(max));\r\n  return array.sort(() => Math.random() - 0.5);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, Box, Typography, Paper } from \"@material-ui/core\";\r\n\r\nimport HeapSortHelper from \"../helpers/HeapSortHelper\";\r\nimport TreeViewer from \"../components/TreeViewer\";\r\n\r\nimport * as mathHelper from \"../helpers/MathHelper\";\r\n\r\nexport default () => {\r\n  const [data, setData] = React.useState();\r\n  const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress(data));\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, []);\r\n\r\n  const handleKeyPress = data => e => {\r\n    if (!data) return;\r\n    if (e.keyCode === 39) {\r\n      setActiveIndex(x => (x + 1 >= data.history.length ? x : x + 1));\r\n    } else if (e.keyCode === 37) {\r\n      setActiveIndex(x => (x - 1 < 0 ? x : x - 1));\r\n    }\r\n  };\r\n\r\n  function componentDidMount() {\r\n    var heap = new HeapSortHelper();\r\n\r\n    var sampleArray = mathHelper.shuffle(10, 100); //[83, 26, 51, 54, 41, 88, 37, 0, 49, 57]; //shuffle();\r\n\r\n    sampleArray.forEach(x => {\r\n      heap.push(x);\r\n    });\r\n\r\n    var tree = heap.getTree();\r\n\r\n    setData({\r\n      nodes: sampleArray,\r\n      root: tree.root,\r\n      initRoot: tree.initRoot,\r\n      history: [{ label: \"init\", root: tree.initRoot }, ...tree.history]\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"space-around\">\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {activeIndex}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={1}>\r\n            You can use your keyboard's (← or →) right and left arrow key to go\r\n            forward or backward.\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        {data &&\r\n          data.history\r\n            .filter((x, idx) => idx === activeIndex)\r\n            .map(x => (\r\n              <TreeViewer\r\n                logLabel={x.label}\r\n                logNodes={x.logNode}\r\n                root={x.root}\r\n              />\r\n            ))}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        {data &&\r\n          data.history\r\n            .filter((log, idx) => idx === activeIndex)\r\n            .map(log => <TreeViewer logLabel={\"Output\"} root={log.output} />)}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Box textAlign=\"center\">\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            [\r\n          </Typography>\r\n          {data &&\r\n            data.nodes.map(x => (\r\n              <Box display=\"inline\" p={1}>\r\n                <Typography variant=\"h5\" display=\"inline\">\r\n                  {x}\r\n                </Typography>\r\n              </Box>\r\n            ))}\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            ]\r\n          </Typography>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport HeapSort from \"./HeapSort\";\r\n\r\nexport default () => {\r\n  return <HeapSort />;\r\n};\r\n","import Tree from \"./Tree\";\r\n\r\nlet tree = new Tree();\r\n\r\nfunction BinaryHeapInsert() {\r\n  this.content = [];\r\n  this.initContent = [];\r\n  this.history = [];\r\n  this.sortedArray = [];\r\n}\r\n\r\nBinaryHeapInsert.prototype = {\r\n  push: function(element) {\r\n    this.log(\"insert \" + this.content.length);\r\n    this.maxHeapInsert(element);\r\n    this.initContent.push(element);\r\n  },\r\n  arr: function(index) {\r\n    return this.content[index];\r\n  },\r\n  swap: function(i, j) {\r\n    this.log(`swap`, [i, j]);\r\n    [this.content[i], this.content[j]] = [this.content[j], this.content[i]];\r\n  },\r\n  log: function(label, logNode) {\r\n    this.history.push({\r\n      label,\r\n      root: tree.getRoot(this.content, {}, 0),\r\n      logNode,\r\n      output:\r\n        this.sortedArray.length > 0 && tree.getArrayHierarchy(this.sortedArray)\r\n    });\r\n  },\r\n  getParentValue: function(i) {\r\n    let parentIndex = this.getParentIndex(i);\r\n    return this.content[parentIndex];\r\n  },\r\n  getParentIndex: function(i) {\r\n    let parentIndex = Math.ceil(i / 2) - 1;\r\n    return parentIndex;\r\n  },\r\n  maxHeapInsert: function(newNode) {\r\n    this.content.push(\"N\" + newNode);\r\n    this.log(\"Added Empty Node\");\r\n    let lastChildIndex = this.content.length - 1;\r\n\r\n    const compareNewNodeWithParent = childIndex => {\r\n      this.log(\"compare\", [childIndex, this.getParentIndex(childIndex)]);\r\n      return newNode > this.getParentValue(childIndex);\r\n    };\r\n\r\n    while (lastChildIndex > 0 && compareNewNodeWithParent(lastChildIndex)) {\r\n      this.log(\"swap\", [lastChildIndex, this.getParentIndex(lastChildIndex)]);\r\n\r\n      this.content[lastChildIndex] = this.getParentValue(lastChildIndex);\r\n      lastChildIndex = this.getParentIndex(lastChildIndex);\r\n      this.content[lastChildIndex] = \"N\" + newNode;\r\n    }\r\n\r\n    this.content[lastChildIndex] = newNode;\r\n  },\r\n  getTree: function() {\r\n    let root = tree.getRoot(this.content, {}, 0);\r\n    let initRoot = tree.getRoot(this.initContent, {}, 0);\r\n    this.log(\"done\");\r\n    return { root, initRoot, history: this.history };\r\n  }\r\n};\r\n\r\nexport default BinaryHeapInsert;\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, Box, Typography, Paper } from \"@material-ui/core\";\r\n\r\nimport TreeViewer from \"../components/TreeViewer\";\r\n\r\nimport * as mathHelper from \"../helpers/MathHelper\";\r\nimport MaxHeapInsertHelper from \"../helpers/MaxHeapInsertHelper\";\r\n\r\nexport default () => {\r\n  const [data, setData] = React.useState();\r\n  const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress(data));\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, []);\r\n\r\n  const handleKeyPress = data => e => {\r\n    if (!data) return;\r\n    if (e.keyCode === 39) {\r\n      setActiveIndex(x => (x + 1 >= data.history.length ? x : x + 1));\r\n    } else if (e.keyCode === 37) {\r\n      setActiveIndex(x => (x - 1 < 0 ? x : x - 1));\r\n    }\r\n  };\r\n\r\n  function componentDidMount() {\r\n    var heap = new MaxHeapInsertHelper();\r\n\r\n    var sampleArray = mathHelper.shuffle(10, 100); //[83, 26, 51, 54, 41, 88, 37, 0, 49, 57]; //shuffle();\r\n\r\n    sampleArray.forEach(x => {\r\n      heap.push(x);\r\n    });\r\n\r\n    var tree = heap.getTree();\r\n\r\n    setData({\r\n      nodes: sampleArray,\r\n      root: tree.root,\r\n      initRoot: tree.initRoot,\r\n      history: [{ label: \"init\", root: tree.initRoot }, ...tree.history]\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"space-around\">\r\n      <Grid item xs={2} justify=\"center\">\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {activeIndex}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={1}>\r\n            You can use your keyboard's (← or →) right and left arrow key to go\r\n            forward or backward.\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        {data &&\r\n          data.history\r\n            .filter((x, idx) => idx === activeIndex)\r\n            .map(x => (\r\n              <TreeViewer\r\n                logLabel={x.label}\r\n                logNodes={x.logNode}\r\n                root={x.root}\r\n              />\r\n            ))}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Box textAlign=\"center\">\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            [\r\n          </Typography>\r\n          {data &&\r\n            data.nodes.map(x => (\r\n              <Box display=\"inline\" p={1}>\r\n                <Typography variant=\"h5\" display=\"inline\">\r\n                  {x}\r\n                </Typography>\r\n              </Box>\r\n            ))}\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            ]\r\n          </Typography>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import Tree from \"./Tree\";\r\n\r\nlet tree = new Tree();\r\n\r\nfunction BinaryHeap() {\r\n  this.content = [];\r\n  this.initContent = [];\r\n  this.history = [];\r\n  this.sortedArray = [];\r\n}\r\n\r\nBinaryHeap.prototype = {\r\n  push: function(element) {\r\n    // Add the new element to the end of the array.\r\n    this.content.push(element);\r\n    this.initContent.push(element);\r\n    this.log(\"insert \" + this.content.length);\r\n    // Allow it to bubble up.\r\n    // this.heapSort(this.content.length);\r\n  },\r\n  arr: function(index) {\r\n    return this.content[index];\r\n  },\r\n  swap: function(i, j) {\r\n    this.log(`swap`, [i, j]);\r\n    [this.content[i], this.content[j]] = [this.content[j], this.content[i]];\r\n  },\r\n  heapSort: function() {\r\n    let length = this.content.length;\r\n    let i = Math.floor(length / 2 - 1);\r\n\r\n    while (i >= 0) {\r\n      this.maxHeapify(i, length);\r\n      i--;\r\n    }\r\n  },\r\n  log: function(label, logNode) {\r\n    this.history.push({\r\n      label,\r\n      root: tree.getRoot(this.content, {}, 0),\r\n      logNode,\r\n      output:\r\n        this.sortedArray.length > 0 && tree.getArrayHierarchy(this.sortedArray)\r\n    });\r\n  },\r\n  maxHeapify: function(i, length) {\r\n    this.log(`MaxHeap (${i})`);\r\n\r\n    let largest = i;\r\n\r\n    let left = i * 2 + 1;\r\n    let right = left + 1;\r\n\r\n    let hasLeftChild = left < length;\r\n    let hasRightChild = right < length;\r\n\r\n    if (hasLeftChild) this.log(`compare`, [left, largest]);\r\n\r\n    if (hasLeftChild && this.arr(left) > this.arr(largest)) {\r\n      largest = left;\r\n    }\r\n\r\n    if (hasRightChild) this.log(`compare`, [right, largest]);\r\n\r\n    if (hasRightChild && this.arr(right) > this.arr(largest)) {\r\n      largest = right;\r\n    }\r\n\r\n    if (largest !== i) {\r\n      this.swap(i, largest);\r\n      this.maxHeapify(largest, length);\r\n    }\r\n  },\r\n  getTree: function() {\r\n    this.heapSort();\r\n    let root = tree.getRoot(this.content, {}, 0);\r\n    let initRoot = tree.getRoot(this.initContent, {}, 0);\r\n    this.log(`done`);\r\n    return { root, initRoot, history: this.history };\r\n  }\r\n};\r\n\r\nexport default BinaryHeap;\r\n","import React, { useEffect } from \"react\";\r\nimport { Grid, Box, Typography, Paper } from \"@material-ui/core\";\r\n\r\nimport TreeViewer from \"../components/TreeViewer\";\r\n\r\nimport * as mathHelper from \"../helpers/MathHelper\";\r\nimport MaxHeapifyHelper from \"../helpers/MaxHeapifyHelper\";\r\n\r\nexport default () => {\r\n  const [data, setData] = React.useState();\r\n  const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"keydown\", handleKeyPress(data));\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, []);\r\n\r\n  const handleKeyPress = data => e => {\r\n    if (!data) return;\r\n    if (e.keyCode === 39) {\r\n      setActiveIndex(x => (x + 1 >= data.history.length ? x : x + 1));\r\n    } else if (e.keyCode === 37) {\r\n      setActiveIndex(x => (x - 1 < 0 ? x : x - 1));\r\n    }\r\n  };\r\n\r\n  function componentDidMount() {\r\n    var heap = new MaxHeapifyHelper();\r\n\r\n    var sampleArray = mathHelper.shuffle(10, 100); //[83, 26, 51, 54, 41, 88, 37, 0, 49, 57]; //shuffle();\r\n\r\n    sampleArray.forEach(x => {\r\n      heap.push(x);\r\n    });\r\n\r\n    var tree = heap.getTree();\r\n\r\n    setData({\r\n      nodes: sampleArray,\r\n      root: tree.root,\r\n      initRoot: tree.initRoot,\r\n      history: [{ label: \"init\", root: tree.initRoot }, ...tree.history]\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" justify=\"space-around\">\r\n      <Grid item xs={2} justify=\"center\">\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {activeIndex}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Paper>\r\n          <Box padding={1}>\r\n            You can use your keyboard's (← or →) right and left arrow key to go\r\n            forward or backward.\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        {data &&\r\n          data.history\r\n            .filter((x, idx) => idx === activeIndex)\r\n            .map(x => (\r\n              <TreeViewer\r\n                logLabel={x.label}\r\n                logNodes={x.logNode}\r\n                root={x.root}\r\n              />\r\n            ))}\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Box textAlign=\"center\">\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            [\r\n          </Typography>\r\n          {data &&\r\n            data.nodes.map(x => (\r\n              <Box display=\"inline\" p={1}>\r\n                <Typography variant=\"h5\" display=\"inline\">\r\n                  {x}\r\n                </Typography>\r\n              </Box>\r\n            ))}\r\n          <Typography variant=\"h5\" display=\"inline\">\r\n            ]\r\n          </Typography>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\n// import Table, {\r\n//   TableBody,\r\n//   TableCell,\r\n//   TableHead,\r\n//   TableRow\r\n// } from \"material-ui/Table\";\r\nimport {\r\n  Paper,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  TableBody,\r\n  TextField,\r\n  IconButton,\r\n  Fab\r\n} from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n    overflowX: \"auto\"\r\n  },\r\n  table: {\r\n    color: \"#000\"\r\n  }\r\n});\r\n\r\nclass App extends Component {\r\n  state = {\r\n    items: this.props.value || []\r\n  };\r\n\r\n  deleteItem = i => () => {\r\n    const { items } = this.state;\r\n    items.splice(i, 1);\r\n    console.log(items);\r\n    this.setState({ items });\r\n    if (this.props.onChange)\r\n      this.props.onChange(\r\n        items\r\n          .filter(x => x.arrivalTime !== \"\" && x.burstTime !== \"\")\r\n          .map(x => {\r\n            x.arrivalTime = x.arrivalTime * 1;\r\n            x.burstTime = x.burstTime * 1;\r\n            return x;\r\n          })\r\n      );\r\n  };\r\n\r\n  addItem = () => {\r\n    const { items } = this.state;\r\n    items.push({ arrivalTime: \"\", burstTime: \"\" });\r\n    this.setState({ items });\r\n    if (this.props.onChange)\r\n      this.props.onChange(\r\n        items\r\n          .filter(x => x.arrivalTime !== \"\" && x.burstTime !== \"\")\r\n          .map(x => {\r\n            x.arrivalTime = x.arrivalTime * 1;\r\n            x.burstTime = x.burstTime * 1;\r\n            return x;\r\n          })\r\n      );\r\n  };\r\n\r\n  textChange = (i, id) => e => {\r\n    const { items } = this.state;\r\n    items[i][id] = e.target.value;\r\n    this.setState({ items });\r\n    if (this.props.onChange)\r\n      this.props.onChange(\r\n        items\r\n          .filter(x => x.arrivalTime !== \"\" && x.burstTime !== \"\")\r\n          .map(x => {\r\n            x.arrivalTime = x.arrivalTime * 1;\r\n            x.burstTime = x.burstTime * 1;\r\n            return x;\r\n          })\r\n      );\r\n  };\r\n  randomHSL = () => {\r\n    return `hsla(${~~(360 * Math.random())},55%,55%,0.8)`;\r\n  };\r\n  randomHSLDark = () => {\r\n    const h = Math.floor(Math.random() * 360),\r\n      s = Math.floor(Math.random() * 100) + \"%\",\r\n      l = Math.floor(Math.random() * 60) + \"%\"; // max value of l is 100, but I set to 60 cause I want to generate dark colors\r\n    // (use for background with white/light font color)\r\n    return `hsl(${h},${s},${l})`;\r\n  };\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>#</TableCell>\r\n              <TableCell>Arrival Time</TableCell>\r\n              <TableCell>Burst Time</TableCell>\r\n              <TableCell>\r\n                <Fab\r\n                  size=\"small\"\r\n                  color=\"primary\"\r\n                  aria-label=\"add\"\r\n                  className={classes.margin}\r\n                  onClick={this.addItem}\r\n                >\r\n                  <AddIcon />\r\n                </Fab>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {this.state.items.map((item, i) => {\r\n              if (!item.color) {\r\n                item.color = this.randomHSL();\r\n                item.color = this.randomHSL();\r\n                item.color = this.randomHSL();\r\n              }\r\n              return (\r\n                <TableRow\r\n                  key={`row-${i}`}\r\n                  style={{ backgroundColor: item.color }}\r\n                >\r\n                  <TableCell>\r\n                    <b>P{i + 1}</b>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <TextField\r\n                      id=\"standard-basic\"\r\n                      value={item.arrivalTime}\r\n                      onChange={this.textChange(i, \"arrivalTime\")}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <TextField\r\n                      id=\"standard-basic\"\r\n                      value={item.burstTime}\r\n                      onChange={this.textChange(i, \"burstTime\")}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Fab\r\n                      size=\"small\"\r\n                      color=\"secondary\"\r\n                      onClick={this.deleteItem(i)}\r\n                      aria-label=\"add\"\r\n                      className={classes.margin}\r\n                    >\r\n                      <DeleteIcon fontSize=\"small\" />\r\n                    </Fab>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n    );\r\n  }\r\n}\r\nconst StyledApp = withStyles(styles)(App);\r\n\r\nexport default StyledApp;\r\n","import React from \"react\";\r\nimport {\r\n  LinearProgress,\r\n  ListItem,\r\n  ListItemText,\r\n  List,\r\n  Divider,\r\n  Chip,\r\n  Avatar\r\n} from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nconst ItemBorderLinearProgress = withStyles({\r\n  root: {\r\n    height: 16\r\n  }\r\n})(LinearProgress);\r\n\r\nexport default props => {\r\n  //leafs\r\n  return (\r\n    <List dense={true}>\r\n      {(props.list || []).map((x, i) => (\r\n        <React.Fragment>\r\n          <Chip\r\n            avatar={<Avatar>{x.id}</Avatar>}\r\n            label={`W.T : ${x.waitingTime}`}\r\n            style={{\r\n              marginBottom: 8,\r\n              marginTop: 8,\r\n              height: 32,\r\n              fontSize: \"1.5em\"\r\n            }}\r\n          />\r\n          {!props.isCompleted && (\r\n            <ItemBorderLinearProgress\r\n              variant=\"determinate\"\r\n              value={(x.executionDuration * 100) / x.burstTime}\r\n            />\r\n          )}\r\n          <Divider />\r\n        </React.Fragment>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n","export const processState = {\r\n  IsNotArrived: \"IsNotArrived\",\r\n  IsReady: \"IsReady\", // ready queue\r\n  IsActive: \"IsActive\", // cpu queue\r\n  IsCompleted: \"IsCompleted\" // completed\r\n};\r\n\r\nfunction FCFSScheduler(tasks) {\r\n  //{arrivalTime,burstTime,waitingTime=0, state:'',excutionDuration:''}\r\n  this.tasks = tasks.map((x, i) => {\r\n    x.id = \"P\" + (i + 1);\r\n    x.waitingTime = 0;\r\n    x.executionDuration = 0;\r\n    x.state = processState.IsNotArrived;\r\n    return x;\r\n  });\r\n\r\n  this.counter = 0;\r\n  this.cpuProcessId = null;\r\n  this.history = [];\r\n}\r\n\r\nFCFSScheduler.prototype = {\r\n  get: function(id) {\r\n    return this.tasks.find(x => x.id === id);\r\n  },\r\n  updateState: function(id, state) {\r\n    const objIndex = this.tasks.findIndex(obj => obj.id === id);\r\n    this.tasks[objIndex].state = state;\r\n  },\r\n  hasNotCompleted: function() {\r\n    return this.tasks.some(x => x.state !== processState.IsCompleted);\r\n  },\r\n  setBestCandidate: function() {\r\n    if (this.hasNotCompleted()) {\r\n      const bestProcess = this.tasks\r\n        .filter((x, i) => x.state === processState.IsReady)\r\n        .sort((first, second) => first.arrivalTime - second.arrivalTime)[0];\r\n\r\n      if (bestProcess) {\r\n        this.updateState(bestProcess.id, processState.IsActive);\r\n        this.cpuProcessId = bestProcess.id;\r\n        this.log(`Context Switch`);\r\n      } else if (this.cpuProcessId != null) {\r\n        this.cpuProcessId = null;\r\n      }\r\n    } else {\r\n      this.cpuProcessId = null;\r\n      this.log(`Context Switch`);\r\n    }\r\n  },\r\n  checkCpuState: function() {\r\n    if (this.cpuProcessId !== null) {\r\n      const currentCpuProcess = this.get(this.cpuProcessId);\r\n      if (currentCpuProcess.burstTime === currentCpuProcess.executionDuration) {\r\n        this.updateState(this.cpuProcessId, processState.IsCompleted);\r\n        this.setBestCandidate();\r\n      }\r\n    } else {\r\n      this.setBestCandidate();\r\n    }\r\n  },\r\n  updateReadyQueue: function() {\r\n    const ATBiggerThanCounter = x => x.arrivalTime <= this.counter;\r\n    const isNotArrived = x => x.state === processState.IsNotArrived;\r\n\r\n    this.tasks = this.tasks.map(x => {\r\n      if (ATBiggerThanCounter(x) && isNotArrived(x))\r\n        x.state = processState.IsReady;\r\n      return x;\r\n    });\r\n\r\n    this.log(`Update Ready Queue`);\r\n  },\r\n  inCreaseCounter: function() {\r\n    this.counter++;\r\n    this.tasks = this.tasks.map(x => {\r\n      if (x.state === processState.IsActive) {\r\n        x.executionDuration++;\r\n      } else if (x.state === processState.IsReady) {\r\n        x.waitingTime++;\r\n      }\r\n      return x;\r\n    });\r\n    this.log(`Increase Counter`);\r\n  },\r\n  schdule: function(params) {\r\n    while (this.hasNotCompleted()) {\r\n      this.updateReadyQueue();\r\n\r\n      this.checkCpuState();\r\n\r\n      if (!this.hasNotCompleted()) break;\r\n\r\n      this.inCreaseCounter();\r\n    }\r\n  },\r\n  log: function(label) {\r\n    let cpu = null;\r\n    if (this.cpuProcessId) cpu = this.get(this.cpuProcessId);\r\n\r\n    let temp = this.tasks.map(x => ({ ...x }));\r\n\r\n    this.history.push({\r\n      label,\r\n      counter: this.counter,\r\n      tasks: temp,\r\n      cpu: cpu && { ...cpu }\r\n    });\r\n  },\r\n  getLogs: function() {\r\n    this.log(`start`);\r\n    this.schdule();\r\n\r\n    this.log(`done`);\r\n    return this.history;\r\n  }\r\n};\r\n\r\nexport default FCFSScheduler;\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  LinearProgress,\r\n  Chip,\r\n  Avatar\r\n} from \"@material-ui/core\";\r\n\r\nimport ProcessTable from \"../components/ProcessTable\";\r\nimport ProcessList from \"../components/ProcessList\";\r\n\r\nimport FCFSScheduler, { processState } from \"../helpers/FCFSScheduler\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\n\r\nexport default () => {\r\n  const BorderLinearProgress = withStyles({\r\n    root: {\r\n      height: 32\r\n    }\r\n  })(LinearProgress);\r\n\r\n  const [userInput, setUserInput] = React.useState([\r\n    { arrivalTime: 0, burstTime: 2 },\r\n    { arrivalTime: 0, burstTime: 2 },\r\n    { arrivalTime: 10, burstTime: 2 }\r\n  ]);\r\n\r\n  const updateInputHandler = data => {\r\n    setUserInput(data);\r\n  };\r\n\r\n  const [lastClickKeyCode, setLastClickKeyCode] = React.useState();\r\n  const [data, setData] = React.useState();\r\n  const [activeIndex, setActiveIndex] = React.useState(0);\r\n\r\n  useEffect(() => {\r\n    if (!data) return;\r\n    if (!lastClickKeyCode) return;\r\n    if (lastClickKeyCode.keyCode === 39) {\r\n      setActiveIndex(x => (x + 1 >= data.logs.length ? x : x + 1));\r\n    } else if (lastClickKeyCode.keyCode === 37) {\r\n      setActiveIndex(x => (x - 1 < 0 ? x : x - 1));\r\n    }\r\n    setLastClickKeyCode(null);\r\n  }, [lastClickKeyCode]);\r\n\r\n  useEffect(() => {\r\n    setActiveIndex(0);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    var scheduler = new FCFSScheduler(userInput);\r\n\r\n    setData({\r\n      logs: scheduler.getLogs()\r\n    });\r\n  }, [userInput]);\r\n\r\n  useEffect(() => {\r\n    componentDidMount();\r\n  }, []);\r\n\r\n  const handleKeyPress = e => {\r\n    if (e.keyCode === 39 || e.keyCode === 37)\r\n      setLastClickKeyCode({ keyCode: e.keyCode, date: new Date() });\r\n  };\r\n\r\n  function componentDidMount() {\r\n    var scheduler = new FCFSScheduler(userInput);\r\n\r\n    setData({\r\n      logs: scheduler.getLogs()\r\n    });\r\n\r\n    document.addEventListener(\"keydown\", handleKeyPress);\r\n  }\r\n\r\n  const getLog = (index, prop) =>\r\n    data && index < data.logs.length && data.logs[index][prop];\r\n\r\n  const cpuProcess = getLog(activeIndex, \"cpu\");\r\n\r\n  let cpuWaitingTime = \"\";\r\n  let cpuCompleted = 0;\r\n  if (cpuProcess) {\r\n    cpuWaitingTime = `Waiting Time: ${cpuProcess.waitingTime}`;\r\n    cpuCompleted = (cpuProcess.executionDuration * 100) / cpuProcess.burstTime;\r\n  }\r\n\r\n  return (\r\n    <Grid container justify=\"space-around\" spacing={2}>\r\n      <Grid item xs={4} justify=\"center\">\r\n        <Typography variant=\"h3\" display=\"inline\">\r\n          {activeIndex}\r\n        </Typography>\r\n        <Typography variant=\"h5\" display=\"inline\">\r\n          {getLog(activeIndex, \"label\")}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={8}>\r\n        <Paper>\r\n          <Box padding={1}>\r\n            You can use your keyboard's (← or →) right and left arrow key to go\r\n            forward or backward.\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item xs={4}>\r\n        <ProcessTable value={userInput} onChange={updateInputHandler} />\r\n      </Grid>\r\n      <Grid item xs={8}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Paper>\r\n              <Box p={2}>\r\n                <Typography variant=\"h6\">\r\n                  CPU ({getLog(activeIndex, \"counter\")})\r\n                </Typography>\r\n                {cpuProcess && (\r\n                  <>\r\n                    <Chip\r\n                      color=\"primary\"\r\n                      size=\"medium\"\r\n                      avatar={<Avatar> {cpuProcess && cpuProcess.id}</Avatar>}\r\n                      label={cpuWaitingTime}\r\n                      style={{ marginBottom: 8, marginTop: 8 }}\r\n                    />\r\n                    <BorderLinearProgress\r\n                      variant=\"determinate\"\r\n                      value={cpuCompleted}\r\n                    />\r\n                  </>\r\n                )}\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Paper>\r\n              <Box p={2}>\r\n                <Typography variant=\"h6\">Ready Queue</Typography>\r\n                <ProcessList\r\n                  list={(getLog(activeIndex, \"tasks\") || []).filter(\r\n                    x => x.state === processState.IsReady\r\n                  )}\r\n                />\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Paper>\r\n              <Box p={2}>\r\n                <Typography variant=\"h6\">Completed</Typography>\r\n                <ProcessList\r\n                  isCompleted\r\n                  list={(getLog(activeIndex, \"tasks\") || []).filter(\r\n                    x => x.state === processState.IsCompleted\r\n                  )}\r\n                />\r\n              </Box>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid item xs={12}>\r\n        <Paper>\r\n          <Box p={2}>\r\n            <Box pb={2}>\r\n              <Typography variant=\"h6\">Gantt Chart</Typography>\r\n            </Box>\r\n            <Grid container>\r\n              {((data && data.logs) || [])\r\n                .filter(\r\n                  x =>\r\n                    x.label === `Increase Counter` &&\r\n                    x.counter <= getLog(activeIndex, \"counter\")\r\n                )\r\n                .map(x => (\r\n                  <Grid item>\r\n                    <Box\r\n                      style={{\r\n                        backgroundColor: x.cpu && x.cpu.color,\r\n                        border: \"1px solid gray\"\r\n                      }}\r\n                      display=\"inline\"\r\n                      p={1.5}\r\n                    >\r\n                      {x.cpu && x.cpu.id}\r\n                    </Box>\r\n                    <Box mt={1.5}>{x.counter}</Box>\r\n                  </Grid>\r\n                ))}\r\n            </Grid>\r\n          </Box>\r\n        </Paper>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { Container, Box, Breadcrumbs, Typography } from \"@material-ui/core\";\r\n\r\nimport Menu from \"./Layout/Menu\";\r\nimport CustomAppBar from \"./Layout/CustomAppBar\";\r\n\r\nimport Home from \"./views/Home\";\r\nimport HeapSort from \"./views/HeapSort\";\r\nimport MaxHeapInsert from \"views/MaxHeapInsert\";\r\nimport MaxHeapify from \"views/MaxHeapify\";\r\nimport FCFS from \"views/FCFS\";\r\n\r\nexport default function App() {\r\n  const [drawer, setDrawerState] = React.useState(false);\r\n\r\n  const toggleDrawer = open => event => {\r\n    if (\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setDrawerState(open);\r\n  };\r\n\r\n  function getBreadcrumbs(props) {\r\n    let routeNames = props.match.url\r\n      .substring(1)\r\n      .replace(/-/g, \" \")\r\n      .split(\"/\");\r\n\r\n    return (\r\n      <Breadcrumbs aria-label=\"breadcrumb\">\r\n        {routeNames.map(x => (\r\n          <Typography key={x} variant={6}>\r\n            {x}\r\n          </Typography>\r\n        ))}\r\n      </Breadcrumbs>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Router basename=\"/\">\r\n      <Menu drawer={drawer} onClose={toggleDrawer(false)} />\r\n      <CustomAppBar onClick={toggleDrawer(true)} />\r\n      <Box pt={2} pl={2}>\r\n        {<Route path=\"*\" component={getBreadcrumbs} />}\r\n      </Box>\r\n      <Container>\r\n        <Box pt={1}>\r\n          <Switch>\r\n            <Route path=\"/Advanced-OperatingSystem/FCFS\">\r\n              <FCFS />\r\n            </Route>\r\n            <Route path=\"/Advanced-Algorithms/Max-Heap-Insert\">\r\n              <MaxHeapInsert />\r\n            </Route>\r\n            <Route path=\"/Advanced-Algorithms/Max-Heapify\">\r\n              <MaxHeapify />\r\n            </Route>\r\n            <Route path=\"/Advanced-Algorithms/Heap-Sort\">\r\n              <HeapSort />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </Box>\r\n      </Container>\r\n    </Router>\r\n  );\r\n}\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    type: \"dark\"\n  }\n});\n\nexport default theme;\n","import React from \"react\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { StylesProvider, jssPreset } from \"@material-ui/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { create } from \"jss\";\n\nimport Router from \"../Router\";\nimport theme from \"./theme\";\n\n// Configure JSS\nconst jss = create({ plugins: [...jssPreset().plugins] });\n\nconst AppTheme = props => (\n  <MuiThemeProvider theme={theme}>\n    <StylesProvider jss={jss}>\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <Router />\n    </StylesProvider>\n  </MuiThemeProvider>\n);\n\nexport default AppTheme;\n","import React from \"react\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store/storeProvider\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport AppTheme from \"./Layout/AppTheme\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppTheme />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}